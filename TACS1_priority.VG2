"VERSION:","1.0"
"OUTERJOIN:","Yes"
"UNIONSORT:","No"
"DISTINCT:","No"
"QUOTECSV:","No"
"CTMISSJOIN:","No"
"EMPTYNULL:","No"
"TERMINAL:","Yes"
"OUTENABLED:","Yes"
"INLINE_VIEW:",""
"LASTPACKEDEXE:",""
"EXCEL:","out_22186.tab"
"ROW:","No"
"EMBED:","Y"
"JOINDUCKDB:","N"
"INCNESTUTIL:","N"
"QUERYROWS:","0"
"JOINROWS:","0"
"FILTERROWS:","0"
"COL_ID_COUNTER:","0"
"CHART_COUNTER:","8"
"PIVOTMODE:","0"
"SQLITESPECIALHDRS:","1"
"LEGACYPIVOTHDRS:","0"
"USEPYENGINE:","Y"
"GLOBALS_FILE:",""
"GLOBAL_VARS:","-1"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Delete:Y@EXEDIR@\SPFDelete.bat <~>*_TO_*.csv<~> <~>N<~>"
"UTILITIESDESC:","Delete Files"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Write-File:Yconfig.tab<SOF><{><}>TYPE	DEST_OPER	DEST_WIP_OPER	PRODUCT<{><}>TO_DSA	1171	1171	ADLP282<{><}>TO_DSA	1171	1171	ARLU281<{><}>TO_DSA	1171	1171	MTLH682<{><}>TO_DSA	1171	1171	MTLU281<{><}>TO_DSA	1171	1171	RPLP282<{><}>TO_DSA	1171	1171	RPLP682<{><}>TO_DSA	1171	1171	RPLPX682<{><}>TO_DSA	1171	1171	TGLUP3<{><}>TO_DSA	1171	1171	TGLH81<{><}>TO_HBC	971	599	ADP<{><}>TO_HBC	971	599	MTP<{><}>TO_HBC	971	599	CFLH62<{><}>TO_HBC	971	599	SKGB42<{><}>TO_HBC	971	599	HSWU22<{><}>TO_HBC	971	599	HSWU23<{><}>TO_JDC	510	510	TPR<{><}>TO_JDC	510	510	GLR<{><}>TO_JDC	510	510	C710<{><}>TO_JDC	510	510	ADLS681<{><}>TO_JDC	510	510	ADLS881<{><}>TO_JDC	510	510	RPLS601<{><}>TO_TCB	1204	599	SKLU22<{><}>TO_TCB	1204	599	BDWU22<{><}>TO_TCB	1204	599	BDWU23"
"UTILITIESDESC:","Write Text to a file. Optionally use <EOF> to mark end of file"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Pre/Post Query:Y{SHIFT_INFO}</@#;>SHIFT_INFO"
"UTILITIESDESC:","Pre/Post Query"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Pre/Post Query:Y{CheckCurrentTimeDifference}</@#;>CheckCurrentTimeDifference"
"UTILITIESDESC:","Pre/Post Query"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Rows-In-File:Y{ROWS-IN-FILE} <~>TimeDifference.csv<~> <~>RowsInFile<~> <~>N<~> <~><~>"
"UTILITIESDESC:","Count Rows in a File"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->If-Then:Y{IF-THEN} <~>RowsInFile<~> <~>GT<~> <~>0<~> <~><~> <~><~> <~><~> <~><~>"
"UTILITIESDESC:","Apply Conditional Logic"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Pre/Post Query:Y{getMOR}</@#;>getMOR"
"UTILITIESDESC:","Pre/Post Query"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->End-If:Y{END-IF}"
"UTILITIESDESC:",""
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Pre/Post Query:Y{DEST_OUTPUT}</@#;>DEST_OUTPUT"
"UTILITIESDESC:","Pre/Post Query"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Pre/Post Query:Y{DEST_GOAL}</@#;>DEST_LOADING_PLAN"
"UTILITIESDESC:","Pre/Post Query"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Pre/Post Query:Y{DEST_GOAL_BY_ENTITY}</@#;>DEST_GOAL_BY_ENTITY"
"UTILITIESDESC:","Pre/Post Query"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Pre/Post Query:Y{TACS1_WIP}</@#;>ALL_WIP"
"UTILITIESDESC:","Pre/Post Query"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Pre/Post Query:Y{CREATE_MIN_MAX_TEMPLATE}</@#;>CREATE_MIN_MAX_TEMPLATE"
"UTILITIESDESC:","Pre/Post Query"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Pre/Post Query:Y{Priority}</@#;>Priority"
"UTILITIESDESC:","Pre/Post Query"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Copy:Y@EXEDIR@\SPFCopy.bat <~>TACS_priority.csv<~> <~>D:\User\CDATOperation\TPX Goaling Report\temp\<~> <~>N<~>"
"UTILITIESDESC:","Copy Files/Folders"
"<---- New Query ---->","-99"
"QUERYGRID:"
"JOINGRID:"
"FILTERGRID:"
/START_EMBED_ALL
/EMBED=VG2;TO_DEST_TPT
"VERSION:","1.0"
"OUTERJOIN:","Yes"
"UNIONSORT:","No"
"DISTINCT:","Yes"
"QUOTECSV:","No"
"CTMISSJOIN:","No"
"EMPTYNULL:","No"
"TERMINAL:","Yes"
"OUTENABLED:","Yes"
"INLINE_VIEW:",""
"LASTPACKEDEXE:",""
"EXCEL:","TACS1_<<<TYPE>>>_TPT.csv"
"ROW:","No"
"EMBED:","Y"
"JOINDUCKDB:","N"
"INCNESTUTIL:","N"
"QUERYROWS:","10"
"JOINROWS:","0"
"FILTERROWS:","3"
"COL_ID_COUNTER:","21"
"CHART_COUNTER:","0"
"PIVOTMODE:","0"
"SQLITESPECIALHDRS:","1"
"LEGACYPIVOTHDRS:","0"
"USEPYENGINE:","Y"
"GLOBALS_FILE:",""
"GLOBAL_VARS:","-1"
"<---- New Query ---->","2:9:a0"
"TABLEGRID:","1"
"","Antares_Factory_Flow_Operation_Cut_Off_Master",""
"MARSNODE:","Default"
"ARIESNODE:","Default"
"OASYSNODE:","Default"
"ARIESCLASSNODE:","ATD.ARIES"
"OTHERNODE:","CD.Antares"
"MARSSCHEMA:","Default"
"DATABASETYPE:","SQLServer"
"SINGLENODE:","CD.Antares"
"SINGLESCHEMA:","N/A"
"PROMPT-TEXT:","Fetching Other Data"
"DISTINCT:","No"
"ROW:","No"
"EXCEL:","No"
"CT_MISS_VAL:","No"
"<---- New Query ---->","-99"
"QUERYGRID:"
"a0.building","building","P","None","None","Row","c","","factoryflowoperationcutoff","a0->a0.[Building]","col9"
"a0.process_family","process_family","P","None","None","Row","c","","factoryflowoperationcutoff","a0->a0.[Process Family]","col13"
"f(a0)->case when  {route}  like  'PP-%' then  RIGHT( {route}, LEN( {route} ) -3) else  {route} end","Prod","Y","None","None","Row","C","***","factoryflowoperationcutoff","a0->case when  {col10}  like  'PP-%' then  RIGHT( {col10}, LEN( {col10} ) -3) else  {col10} end","col20"
"a0.route","route","Y","None","None","Row","c","","factoryflowoperationcutoff","a0->a0.[Route]","col10"
"a0.flow_name","flow_name","Y","None","None","Row","c","","factoryflowoperationcutoff","a0->a0.[Flow Name]","col21"
"a0.operation","operation","Y","None","None","Row","c","","factoryflowoperationcutoff","a0->a0.[Operation]","col12"
"a0.seq_num","seq_num","Y","None","None","Row","n","","factoryflowoperationcutoff","a0->a0.[Seq Num]","col15"
"a0.cycletime_goal","cycletime_goal","Y","None","None","Row","f","","factoryflowoperationcutoff","a0->a0.[CycleTime Goal]","col16"
"a0.ct_goal_override","ct_goal_override","Y","None","None","Row","f","","factoryflowoperationcutoff","a0->a0.[CT Goal Override]","col17"
"f(a0)->case when  {ct_goal_override} is null then  {cycletime_goal} else  {ct_goal_override} end","ct_goal","Y","None","None","Row","C","***","factoryflowoperationcutoff","a0->case when  {col17} is null then  {col16} else  {col17} end","col18"
"JOINGRID:"
"FILTERGRID:"
"AND","","a0.building","=","'CD6'","",".","c","factoryflowoperationcutoff","a0->a0.[Building]",""
"AND","","a0.flow_name","Is Not Null","","",".","c","factoryflowoperationcutoff","a0->a0.[Flow Name]",""
"AND","","f(a0)->{prod}","In","'<<<PRODUCT>>>'","","","cx","@IF@1","a0->{col20}",""










































































































































































































































































































































































































































































































































































































































































































































































































/END_EMBED
/EMBED=VG2;DEST_WIP
"VERSION:","1.0"
"OUTERJOIN:","Yes"
"UNIONSORT:","No"
"DISTINCT:","Yes"
"QUOTECSV:","No"
"CTMISSJOIN:","No"
"EMPTYNULL:","No"
"TERMINAL:","Yes"
"OUTENABLED:","Yes"
"INLINE_VIEW:",""
"LASTPACKEDEXE:",""
"EXCEL:","<<<DEST_OPER>>>_WIP.csv"
"ROW:","No"
"EMBED:","Y"
"JOINDUCKDB:","N"
"INCNESTUTIL:","N"
"QUERYROWS:","6"
"JOINROWS:","0"
"FILTERROWS:","6"
"COL_ID_COUNTER:","7"
"CHART_COUNTER:","0"
"PIVOTMODE:","0"
"SQLITESPECIALHDRS:","1"
"LEGACYPIVOTHDRS:","0"
"USEPYENGINE:","Y"
"GLOBALS_FILE:",""
"GLOBAL_VARS:","-1"
"<---- New Query ---->","2:0:a0"
"TABLEGRID:","1"
"","F_Lot_Status_22",""
"MARSNODE:","Default"
"ARIESNODE:","Default"
"OASYSNODE:","Default"
"ARIESCLASSNODE:","ATD.ARIES"
"OTHERNODE:","Default"
"MARSSCHEMA:","Default"
"DATABASETYPE:","Oracle"
"SINGLENODE:","Default"
"SINGLESCHEMA:","Default"
"PROMPT-TEXT:","Fetching MARS Data"
"DISTINCT:","Yes"
"ROW:","No"
"EXCEL:","No"
"CT_MISS_VAL:","No"
"FIRST_ROWS:","No"
"ORDERED:","No"
"OTHER-HINT:","No"
"<---- New Query ---->","-99"
"QUERYGRID:"
"f(a0)->CASE WHEN  {sub} like 'PP-%' THEN SUBSTR( {sub} ,4, LENGTH( {sub} ) - 3 ) ELSE  {sub}  END","prod","Y","None","None","Row","C","***","@if@1","a0->CASE WHEN  {col4} like 'PP-%' THEN SUBSTR( {col4} ,4, LENGTH( {col4} ) - 3 ) ELSE  {col4}  END","col5"
"a0.prodgroup3","sub","Y","None","None","Row","c","Product Classification column. May be a useful filter in Assembly/Test","f_product","a0->p.prodgroup3","col4"
"a0.lot","lot","P","None","None","Row","c","Identifies a batch of wafers or units being processed in the factory. The basic format of the Lot number is:  FYWWNNNN where F=fab code, Y=year, WW=workweek, NNNN= sequence, with the 9th or 10th characters as alphanumeric. In Fab, Etest and Sort, a quantity that has a wafer as an unit of measure and the physical form that passes through the factory. A lot starting the Fab process contains up to 25 wafers and can be split into child lots of varying sizes, and wafer losses can also occur. New lots are also created to split lots due to varying characteristics, such as speed or rework, for a portion of the lot. In some 200mm fabs production lots, the lot number uses a silicon vendor ID in the 8th character","f_lot","a0->f0.lot","col1"
"a0.operation","operation","P","None","None","Row","c","The current operation (or processing step) the lot is at","f_lot","a0->f0.operation","col2"
"a0.quantity","quantity","P","None","None","Row","n","The current number of units or wafers or panels in the lot","f_lot","a0->f0.qty1","col3"
"f(a0)->SUM ( {quantity} ) OVER (PARTITION BY  {prod}  ORDER BY  {prod} )","WIP","Y","None","None","Row","N","***","@if@2","a0->SUM ( {col3} ) OVER (PARTITION BY  {col5}  ORDER BY  {col5} )","col7"
"JOINGRID:"
"FILTERGRID:"
"AND","","a0.terminated","=","'N'","","","c","f_lot","a0->f0.terminated",""
"AND","","a0.quantity",">","0","","","n","f_lot","a0->f0.qty1",""
"AND","","a0.src_erase_date","Is Null","","","","d","f_lot","a0->f0.src_erase_date",""
"AND","","a0.operation","=","'<<<DEST_OPER>>>'","","","c","f_lot","a0->f0.operation",""
"AND","","f(a0)->{prod}","In","'<<<PRODUCT>>>'","","","cx","@IF@2","a0->{col5}",""
"AND","","a0.owner","!=","'TEST'","","","c","f_lot","a0->f0.owner",""










































































































































































































































































































































































































































































































































































































































































































































































































/END_EMBED
/EMBED=VG2;DEST_GOAL
"VERSION:","1.0"
"OUTERJOIN:","Yes"
"UNIONSORT:","No"
"DISTINCT:","Yes"
"QUOTECSV:","No"
"CTMISSJOIN:","No"
"EMPTYNULL:","No"
"TERMINAL:","No"
"OUTENABLED:","Yes"
"INLINE_VIEW:",""
"LASTPACKEDEXE:",""
"EXCEL:","LOADING_PLAN.csv"
"ROW:","No"
"EMBED:","Y"
"JOINDUCKDB:","N"
"INCNESTUTIL:","N"
"QUERYROWS:","18"
"JOINROWS:","1"
"FILTERROWS:","7"
"COL_ID_COUNTER:","60"
"CHART_COUNTER:","0"
"PIVOTMODE:","0"
"SQLITESPECIALHDRS:","1"
"LEGACYPIVOTHDRS:","0"
"USEPYENGINE:","Y"
"GLOBALS_FILE:",""
"GLOBAL_VARS:","-1"
"<---- New Query ---->","1:5:SQL"
"TABLEGRID:","1"
"","calendar_raw_CD.tab a0",""
"MARSNODE:","Default"
"ARIESNODE:","Default"
"OASYSNODE:","Default"
"ARIESCLASSNODE:","ATD.ARIES"
"OTHERNODE:","TEXT (SQLite)"
"MARSSCHEMA:","Default"
"DATABASETYPE:","SQLite"
"SINGLENODE:","TEXT (SQLite)"
"SINGLESCHEMA:","N/A"
"PROMPT-TEXT:","Fetching Text (SQLite) Data"
"DISTINCT:","No"
"ROW:","No"
"EXCEL:","No"
"CT_MISS_VAL:","No"
"PREPROCESS_CSV:","No"
"NOHDRS:","No"
"CARTESIAN:","No"
"<---- New Query ---->","2:9:a1"
"TABLEGRID:","1"
"","Antares_Factory_Loading_Plan_Summary_Master",""
"MARSNODE:","Default"
"ARIESNODE:","Default"
"OASYSNODE:","Default"
"ARIESCLASSNODE:","ATD.ARIES"
"OTHERNODE:","CD.Antares"
"MARSSCHEMA:","Default"
"DATABASETYPE:","SQLServer"
"SINGLENODE:","CD.Antares"
"SINGLESCHEMA:","N/A"
"PROMPT-TEXT:","Fetching Other Data"
"DISTINCT:","No"
"ROW:","No"
"EXCEL:","No"
"CT_MISS_VAL:","No"
"PARALLEL:","0"
"IGNOREINCSUM:","No"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Write-File:YLOADING_PLAN.py<SOF><{><}>#!/usr/bin/env python<{><}># coding: utf-8<{><}><{><}># In[1]:<{><}><{><}><{><}>import pandas as pd<{><}>import numpy as np<{><}>import re<{><}><{><}><{><}># In[2]:<{><}><{><}><{><}>df_SHIFT = pd.read_csv('SHIFT_INFO.csv')<{><}>df_MOR = pd.read_csv('MOR.csv')<{><}>df_DEST_OUTPUT = pd.read_csv('DEST_OUTPUT.csv')<{><}>df_LOADING_PLAN = pd.read_csv('LOADING_PLAN.csv')<{><}>df_LOADING_PLAN['actual'] = df_LOADING_PLAN['actual'].fillna(0)<{><}>df_LOADING_PLAN['remaining_hrs'] = 0<{><}><{><}>for idx, row in df_DEST_OUTPUT.iterrows():<{><}>    shift, prod, oper, ent, output = row['ww_shift'], row['pd3'], row['operation'], row['entity'], row['output']<{><}>    df_LOADING_PLAN.loc[(df_LOADING_PLAN['ww_shift'] == shift) & (df_LOADING_PLAN['prodgroup3'] == prod) & (<{><}>        df_LOADING_PLAN['operation'] == oper) & (df_LOADING_PLAN['entity'] == ent), 'actual'] = output<{><}><{><}># In[3]:<{><}><{><}><{><}>shift = df_SHIFT.sort_values(by='ww_shift')['ww_shift'].unique()<{><}>n_shift, n_1_shift, n_2_shift, n_3_shift = shift[0], shift[1], shift[2], shift[3]<{><}><{><}><{><}># In[4]:<{><}><{><}><{><}>remaining_hrs = 12 + df_SHIFT.loc[0, 'start_current'] * 24<{><}>df_LOADING_PLAN.loc[df_LOADING_PLAN['ww_shift']<{><}>                    == n_shift, 'remaining_hrs'] = remaining_hrs<{><}>df_LOADING_PLAN.loc[df_LOADING_PLAN['ww_shift']<{><}>                    != n_shift, 'remaining_hrs'] = 12<{><}><{><}># In[5]:<{><}><{><}><{><}># Convert non-prod event hrs to tr in hrs<{><}><{><}>df_LOADING_PLAN['tr_hrs'] = np.nan<{><}><{><}>non_prod_event = ['NSM', 'HDOE', 'EDOE', 'ProductEE', 'PM', 'USD', 'BAG']<{><}><{><}>for idx, row in df_LOADING_PLAN[(df_LOADING_PLAN['unit'] == 'hrs') | (df_LOADING_PLAN['display_name'].str.contains('|'.join(non_prod_event)))].iterrows():<{><}><{><}>    if row['unit'] == 'hrs':<{><}><{><}>        tr_hrs = round(row['goal']/3600, 2)<{><}><{><}>        if tr_hrs >= 12-row['remaining_hrs']:<{><}>            df_LOADING_PLAN.loc[idx, 'tr_hrs'] = tr_hrs - \<{><}>                (12-row['remaining_hrs'])<{><}><{><}>        else:<{><}>            df_LOADING_PLAN.loc[idx, 'tr_hrs'] = 0<{><}><{><}>    else:<{><}><{><}>        try:<{><}>            remark = row['remark']<{><}>            remark = remark.replace(' ', '')<{><}>            tr_hrs = int(re.findall(r<~>(\d+)hrs<~>, remark)[0])<{><}><{><}>            if tr_hrs >= 12-row['remaining_hrs']:<{><}>                df_LOADING_PLAN.loc[idx, 'tr_hrs'] = tr_hrs - \<{><}>                    (12-row['remaining_hrs'])<{><}>            else:<{><}>                df_LOADING_PLAN.loc[idx, 'tr_hrs'] = 0<{><}>            df_LOADING_PLAN.loc[idx, 'tr_hrs'] = round(tr_hrs, 2)<{><}><{><}>        except:<{><}>            df_LOADING_PLAN.loc[idx, 'tr_hrs'] = 0<{><}><{><}># In[6]:<{><}><{><}><{><}># Convert prod goal to tr in hrs<{><}><{><}>df_LOADING_PLAN.loc[df_LOADING_PLAN['tr_hrs'].isnull(), 'rest_goal'] = df_LOADING_PLAN[df_LOADING_PLAN['tr_hrs'].isnull(<{><}>)]['goal'] - df_LOADING_PLAN[df_LOADING_PLAN['tr_hrs'].isnull()]['actual']<{><}><{><}><{><}># In[7]:<{><}><{><}><{><}>for idx, row in df_LOADING_PLAN[(df_LOADING_PLAN['rest_goal'].notnull()) & (df_LOADING_PLAN['tr_hrs'].isnull())].iterrows():<{><}><{><}>    if <~>IFS<~> not in row['prodgroup3']:<{><}>        prod = row['prodgroup3'].split('_')[0]<{><}>    else:<{><}>        prod = row['prodgroup3'].split('_')[1]<{><}><{><}>    mor = df_MOR[(df_MOR['prodgroup3'] == prod) & (<{><}>        df_MOR['ceid'].str.contains(row['entity'][:3]))]['mor'].values[0]<{><}>    df_LOADING_PLAN.loc[idx, 'mor'] = mor<{><}><{><}># In[9]:<{><}><{><}><{><}># only carryover for product to the next shift<{><}><{><}>for idx, row in df_LOADING_PLAN[df_LOADING_PLAN['rest_goal'].notnull()].iterrows():<{><}><{><}>    # + carry-over<{><}><{><}>    if row['rest_goal'] < 0:<{><}><{><}>        df_LOADING_PLAN.loc[idx, 'tr_hrs'] = 0<{><}><{><}>        if row['ww_shift'] == n_shift:<{><}>            try:<{><}>                df_LOADING_PLAN.loc[(df_LOADING_PLAN['ww_shift'] == n_1_shift) & (df_LOADING_PLAN['display_name'] == row['display_name']) & (<{><}>                    df_LOADING_PLAN['entity'] == row['entity']), 'rest_goal'] += row['rest_goal']<{><}>            except:<{><}>                pass<{><}>        elif row['ww_shift'] == n_1_shift:<{><}>            try:<{><}>                df_LOADING_PLAN.loc[(df_LOADING_PLAN['ww_shift'] == n_2_shift) & (df_LOADING_PLAN['display_name'] == row['display_name']) & (<{><}>                    df_LOADING_PLAN['entity'] == row['entity']), 'rest_goal'] += row['rest_goal']<{><}>            except:<{><}>                pass<{><}>        elif row['ww_shift'] == n_2_shift:<{><}>            try:<{><}>                df_LOADING_PLAN.loc[(df_LOADING_PLAN['ww_shift'] == n_3_shift) & (df_LOADING_PLAN['display_name'] == row['display_name']) & (<{><}>                    df_LOADING_PLAN['entity'] == row['entity']), 'rest_goal'] += row['rest_goal']<{><}>            except:<{><}>                pass<{><}><{><}>    # - carry-over<{><}>    elif row['rest_goal'] > row['mor']*row['remaining_hrs']/12:<{><}><{><}>        if row['ww_shift'] == n_shift:<{><}>            try:<{><}>                df_LOADING_PLAN.loc[(df_LOADING_PLAN['ww_shift'] == n_1_shift) & (df_LOADING_PLAN['display_name'] == row['display_name']) & (<{><}>                    df_LOADING_PLAN['entity'] == row['entity']), 'rest_goal'] += row['rest_goal'] - row['mor']*row['remaining_hrs']/12<{><}>            except:<{><}>                pass<{><}>        elif row['ww_shift'] == n_1_shift:<{><}>            try:<{><}>                df_LOADING_PLAN.loc[(df_LOADING_PLAN['ww_shift'] == n_2_shift) & (df_LOADING_PLAN['display_name'] == row['display_name']) & (<{><}>                    df_LOADING_PLAN['entity'] == row['entity']), 'rest_goal'] += row['rest_goal'] - row['mor']*row['remaining_hrs']/12<{><}>            except:<{><}>                pass<{><}>        elif row['ww_shift'] == n_2_shift:<{><}>            try:<{><}>                df_LOADING_PLAN.loc[(df_LOADING_PLAN['ww_shift'] == n_3_shift) & (df_LOADING_PLAN['display_name'] == row['display_name']) & (<{><}>                    df_LOADING_PLAN['entity'] == row['entity']), 'rest_goal'] += row['rest_goal'] - row['mor']*row['remaining_hrs']/12<{><}>            except:<{><}>                pass<{><}><{><}>    tr_hrs = row['rest_goal']/(row['mor']/12)<{><}>    df_LOADING_PLAN.loc[idx, 'tr_hrs'] = tr_hrs<{><}><{><}># In[11]:<{><}><{><}>for idx, row in df_LOADING_PLAN[(df_LOADING_PLAN['unit'] == 'hrs') | (df_LOADING_PLAN['display_name'].str.contains('|'.join(non_prod_event)))].iterrows():<{><}>    if row['tr_hrs'] == 0:<{><}>        df_LOADING_PLAN = df_LOADING_PLAN.drop(idx)<{><}><{><}>for idx, row in df_LOADING_PLAN.iterrows():<{><}>    if pd.isna(row['tr_hrs']):<{><}>        comb = row['prodgroup3'].split('_')<{><}>        prod, oper = comb[0], comb[1]<{><}>        shift_cap = df_MOR[(df_MOR['prodgroup3'] == prod) & (<{><}>            df_MOR['ceid'].str.contains(row['entity'][:3]))]['mor'].values[0]<{><}>        tr_hrs = 12*row['rest_goal']/shift_cap<{><}>        df_LOADING_PLAN.loc[idx, ['tr_hrs', 'mor']] = tr_hrs, shift_cap<{><}><{><}>df_LOADING_PLAN.to_csv('DEST_LOADING_PLAN.csv', index=False)"
"UTILITIESDESC:","Write Text to a file. Optionally use <EOF> to mark end of file"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Python:Y@EXEDIR@\Run_Python_Script.va <~>LOADING_PLAN.py<~> <~><~> <~>N<~> <~><<<SPF-APP-SERVER>>><~> <~>Python-v3<~>"
"UTILITIESDESC:","Run Python script"
"<---- New Query ---->","-99"
"QUERYGRID:"
"a0.ww_shift","ww_shift","Y","None","None","Row","c","","csv","SQL->a0.[ww_shift]","col1"
"a0.calcudf1","calcudf1","Y","None","None","Row","c","","csv","SQL->a0.[calcudf1]","col2"
"a0.start_date","start_date","P","None","None","Row","c","","csv","SQL->a0.[start_date]","col3"
"a0.end_date","end_date","P","None","None","Row","c","","csv","SQL->a0.[end_date]","col4"
"f(x)->Datetime('now','localtime')","nowtime","P","None","None","Row","H","***","","SQL->Datetime('now','localtime')","col5"
"f(x)->SPF_FN$Date_Diff({start_date},{nowtime})","startdate_sysdate","P","None","None","Row","N","***","@if@1","SQL->SPF_FN$Date_Diff({col3},{col5})","col6"
"a1.entity","entity","Y","None","None","Row","c","","factoryloadingplansummary","a1->z0.[Entity]","col9"
"a1.intel_shift","intel_shift","P","None","None","Row","c","","factoryloadingplansummary","a1->z0.[Intel_Shift]","col7"
"a1.operation","operation","Y","None","None","Row","c","","factoryloadingplansummary","a1->z0.[Operation]","col21"
"a1.seq","seq","Y","None","None","Row","n","","factoryloadingplansummary","a1->z0.[Seq]","col35"
"a1.display_name","display_name","Y","None","None","Row","c","","factoryloadingplansummary","a1->z0.[Display_Name]","col24"
"f(a1)->CASE !!!!!WHEN  {display_name} LIKE 'ADP%' THEN 'ADP' !!!!!WHEN  {display_name} LIKE 'MTP%' THEN 'MTP' !!!!!WHEN  {display_name} LIKE 'CFLH62%' THEN 'CFLH62' !!!!!WHEN  {display_name} LIKE 'HSWU22%' THEN 'HSWU22' !!!!!WHEN  {display_name} LIKE 'HSWU23%' THEN 'HSWU23' !!!!!WHEN  {display_name} LIKE 'IFS_C710%' THEN 'C710' !!!!!WHEN  {display_name} LIKE 'IFS_GLR%' THEN 'GLR' !!!!!WHEN  {display_name} LIKE 'IFS_TPR%' THEN 'TPR' !!!!!WHEN  {display_name} LIKE 'TPR%' THEN 'TPR' !!!!!WHEN  {display_name} LIKE 'SKGB42%' THEN 'SKGB42'!!!!!WHEN  {display_name} LIKE 'SKHB42%' THEN 'SKGB42'!!!!!WHEN  {display_name} LIKE 'MTLH682%' THEN 'MTLH682'!!!!!WHEN  {display_name} LIKE 'MTLU281%' THEN 'MTLU281'!!!!!WHEN  {display_name} LIKE 'RPLS881%' THEN 'RPLS881'!!!!!WHEN  {display_name} LIKE 'RPRP282%' THEN 'RPRP282'!!!!!ELSE REPLACE( {display_name} ,'PP-','')   END","prodgroup3","Y","None","None","Row","C","***","factoryloadingplansummary","a1->CASE !!!!!WHEN  {col24} LIKE 'ADP%' THEN 'ADP' !!!!!WHEN  {col24} LIKE 'MTP%' THEN 'MTP' !!!!!WHEN  {col24} LIKE 'CFLH62%' THEN 'CFLH62' !!!!!WHEN  {col24} LIKE 'HSWU22%' THEN 'HSWU22' !!!!!WHEN  {col24} LIKE 'HSWU23%' THEN 'HSWU23' !!!!!WHEN  {col24} LIKE 'IFS_C710%' THEN 'C710' !!!!!WHEN  {col24} LIKE 'IFS_GLR%' THEN 'GLR' !!!!!WHEN  {col24} LIKE 'IFS_TPR%' THEN 'TPR' !!!!!WHEN  {col24} LIKE 'TPR%' THEN 'TPR' !!!!!WHEN  {col24} LIKE 'SKGB42%' THEN 'SKGB42'!!!!!WHEN  {col24} LIKE 'SKHB42%' THEN 'SKGB42'!!!!!WHEN  {col24} LIKE 'MTLH682%' THEN 'MTLH682'!!!!!WHEN  {col24} LIKE 'MTLU281%' THEN 'MTLU281'!!!!!WHEN  {col24} LIKE 'RPLS881%' THEN 'RPLS881'!!!!!WHEN  {col24} LIKE 'RPRP282%' THEN 'RPRP282'!!!!!ELSE REPLACE( {col24} ,'PP-','')   END","col26"
"a1.unit","unit","Y","None","None","Row","c","","factoryloadingplansummary","a1->z0.[Unit]","col37"
"a1.remark","remark","Y","None","None","Row","c","","factoryloadingplansummary","a1->z0.[Remark]","col38"
"a1.ffs_product_group","ffs_product_group","Y","None","None","Row","c","","factoryloadingplansummary","a1->z0.[FFS_Product_Group]","col11"
"f(a1)->CASE !!!!!WHEN  {ffs_product_group} LIKE 'ADP%' THEN 'M15966-001'!!!!!WHEN  {ffs_product_group} LIKE 'CFLH62%' THEN 'J30217-001'!!!!!WHEN  {ffs_product_group} LIKE 'HSWU22%' THEN 'H22381-002'!!!!!WHEN  {ffs_product_group} LIKE 'HSWU23%' THEN 'G81364-001'!!!!!WHEN  {ffs_product_group} LIKE 'SKGB%' THEN 'H33829-001'!!!!!WHEN  {ffs_product_group} LIKE 'SKHB%' THEN 'H33829-001'!!!!!WHEN  {ffs_product_group} LIKE 'SKLU22%' THEN 'H70961-001'!!!!!ELSE  REPLACE( {ffs_product_group} ,'_','')  END!!!!!","flow_name","Y","None","None","Row","C","***","factoryloadingplansummary","a1->CASE !!!!!WHEN  {col11} LIKE 'ADP%' THEN 'M15966-001'!!!!!WHEN  {col11} LIKE 'CFLH62%' THEN 'J30217-001'!!!!!WHEN  {col11} LIKE 'HSWU22%' THEN 'H22381-002'!!!!!WHEN  {col11} LIKE 'HSWU23%' THEN 'G81364-001'!!!!!WHEN  {col11} LIKE 'SKGB%' THEN 'H33829-001'!!!!!WHEN  {col11} LIKE 'SKHB%' THEN 'H33829-001'!!!!!WHEN  {col11} LIKE 'SKLU22%' THEN 'H70961-001'!!!!!ELSE  REPLACE( {col11} ,'_','')  END!!!!!","col25"
"a1.target","goal","Y","None","None","Row","f","","factoryloadingplansummary","a1->z0.[Target]","col8"
"a1.actual","actual","Y","None","None","Row","f","","factoryloadingplansummary","a1->z0.[Actual]","col39"
"JOINGRID:"
"AND","","Sqlite->a0.ww_shift                                                                                                    : SQL->{col1}","=","View->a1.intel_shift                                                                                                    : a1->{col7}",""
"FILTERGRID:"
"AND","","f(x)->{startdate_sysdate}","Between","-0.5","","","nx","@IF@2","SQL->{col6}","1.5"
"AND","","a1.intel_shift","In Temp"," {Sqlite (all)} : Sqlite->a0.ww_shift","","","c","factoryloadingplansummary","a1->z0.[Intel_Shift]","SQL->{col1}"
"AND","","a1.target",">=","0","","","f","factoryloadingplansummary","a1->z0.[Target]",""
"AND","","a1.display_name","Is Not Null","","","","c","factoryloadingplansummary","a1->z0.[Display_Name]",""
"-- AND","","a1.operation","In","'0510'</comma\>'1204'</comma\>'0971'</comma\>'1171'","","","c","factoryloadingplansummary","a1->z0.[Operation]",""
"AND","","a1.entity","Like List","'JDC%'</comma\>'HBC%'</comma\>'TCB%'</comma\>'DIA%'","","","c","factoryloadingplansummary","a1->z0.[Entity]",""
"AND","","a1.operation","Is Not Null","","","","c","factoryloadingplansummary","a1->z0.[Operation]",""








/END_EMBED
/EMBED=VG2;TACS1_WIP
"VERSION:","1.0"
"OUTERJOIN:","Yes"
"UNIONSORT:","No"
"DISTINCT:","Yes"
"QUOTECSV:","No"
"CTMISSJOIN:","No"
"EMPTYNULL:","No"
"TERMINAL:","No"
"OUTENABLED:","Yes"
"INLINE_VIEW:",""
"LASTPACKEDEXE:",""
"EXCEL:","ALL_WIP.csv"
"ROW:","No"
"EMBED:","Y"
"JOINDUCKDB:","N"
"INCNESTUTIL:","N"
"QUERYROWS:","16"
"JOINROWS:","3"
"FILTERROWS:","10"
"COL_ID_COUNTER:","37"
"CHART_COUNTER:","0"
"PIVOTMODE:","0"
"SQLITESPECIALHDRS:","1"
"LEGACYPIVOTHDRS:","0"
"USEPYENGINE:","Y"
"GLOBALS_FILE:",""
"GLOBAL_VARS:","-1"
"<---- New Query ---->","2:9:a0"
"TABLEGRID:","1"
"","Antares_Factory_Flow_Operation_Cut_Off_Master",""
"MARSNODE:","Default"
"ARIESNODE:","Default"
"OASYSNODE:","Default"
"ARIESCLASSNODE:","ATD.ARIES"
"OTHERNODE:","CD.Antares"
"MARSSCHEMA:","Default"
"DATABASETYPE:","SQLServer"
"SINGLENODE:","CD.Antares"
"SINGLESCHEMA:","N/A"
"PROMPT-TEXT:","Fetching Other Data"
"DISTINCT:","No"
"ROW:","No"
"EXCEL:","No"
"CT_MISS_VAL:","No"
"PARALLEL:","0"
"IGNOREINCSUM:","No"
"<---- New Query ---->","2:0:a1"
"TABLEGRID:","1"
"","F_Lot_Status_22",""
"MARSNODE:","Default"
"ARIESNODE:","Default"
"OASYSNODE:","Default"
"ARIESCLASSNODE:","ATD.ARIES"
"OTHERNODE:","CD.Antares"
"MARSSCHEMA:","Default"
"DATABASETYPE:","Oracle"
"SINGLENODE:","Default"
"SINGLESCHEMA:","Default"
"PROMPT-TEXT:","Fetching MARS Data"
"DISTINCT:","No"
"ROW:","No"
"EXCEL:","No"
"CT_MISS_VAL:","No"
"PARALLEL:","0"
"IGNOREINCSUM:","No"
"FIRST_ROWS:","No"
"ORDERED:","No"
"OTHER-HINT:","No"
"<---- New Query ---->","-99"
"QUERYGRID:"
"a0.process_family","process_family","P","None","None","Row","c","","factoryflowoperationcutoff","a0->a0.[Process Family]","col13"
"f(a0)->case !!!!!when  {route} like '%CFLHALO%' then 'CFLH62'!!!!!when  {route} like '%SKLHALO%' then 'SKGB42'!!!!!when  {route} like '%SKLS2U%' then 'SKLU22'!!!!!when  {route}  like  'PP-%' then  REPLACE( {route} ,'PP-','') !!!!!else  {route} end","prod","Y","None","None","Row","C","***","factoryflowoperationcutoff","a0->case !!!!!when  {col10} like '%CFLHALO%' then 'CFLH62'!!!!!when  {col10} like '%SKLHALO%' then 'SKGB42'!!!!!when  {col10} like '%SKLS2U%' then 'SKLU22'!!!!!when  {col10}  like  'PP-%' then  REPLACE( {col10} ,'PP-','') !!!!!else  {col10} end","col20"
"a0.route","route","P","None","None","Row","c","","factoryflowoperationcutoff","a0->a0.[Route]","col10"
"a0.flow_name","flow_name_1","P","None","None","Row","c","","factoryflowoperationcutoff","a0->a0.[Flow Name]","col21"
"f(a0)->LEFT( {flow_name_1} ,10)","flow_name","Y","None","None","Row","C","***","factoryflowoperationcutoff","a0->LEFT( {col21} ,10)","col33"
"a0.operation","operation","Y","None","None","Row","c","","factoryflowoperationcutoff","a0->a0.[Operation]","col12"
"a0.seq_num","seq_num","Y","None","None","Row","n","","factoryflowoperationcutoff","a0->a0.[Seq Num]","col15"
"a0.cycletime_goal","cycletime_goal","P","None","None","Row","f","","factoryflowoperationcutoff","a0->a0.[CycleTime Goal]","col16"
"a0.ct_goal_override","ct_goal_override","P","None","None","Row","f","","factoryflowoperationcutoff","a0->a0.[CT Goal Override]","col17"
"f(a0)->case when  {ct_goal_override} is null then  {cycletime_goal} else  {ct_goal_override} end","ct_goal","Y","None","None","Row","C","***","factoryflowoperationcutoff","a0->case when  {col17} is null then  {col16} else  {col17} end","col18"
"a1.operation","operation_1","P","None","None","Row","c","The current operation (or processing step) the lot is at","f_lot","a1->f0.operation","col23"
"a1.quantity","quantity","P","None","None","Row","n","The current number of units or wafers or panels in the lot","f_lot","a1->f0.qty1","col24"
"a1.prodgroup3","prodgroup3","P","None","None","Row","c","Product Classification column. May be a useful filter in Assembly/Test","f_product","a1->p.prodgroup3","col25"
"a1.product","product_1","P","None","None","Row","c","The current product associated with the lot","f_lot","a1->f0.product","col31"
"f(a1)->REPLACE( {product_1} ,' ','')","product","Y","None","None","Row","C","***","f_lot","a1->REPLACE( {col31} ,' ','')","col35"
"f(x)->SUM ( {quantity} ) OVER (PARTITION BY  {operation_1} ,  {prodgroup3},  {product_1},  {flow_name_1} )","WIP","Y","None","None","Row","N","***","factoryflowoperationcutoff","All->SUM ( {col24} ) OVER (PARTITION BY  {col23} ,  {col25},  {col31},  {col21} )","col36"
"JOINGRID:"
"AND","","View->a0.operation                                                                                                    : a0->{col12}","=","View->a1.operation                                                                                                    : a1->{col23}",""
"AND","","View->a0.process_family                                                                                                    : a0->{col13}","=","View->a1.prodgroup3                                                                                                    : a1->{col25}",""
"AND","","View->f(a0)->flow_name                                                                                                    : a0->{col33}","=","View->f(a1)->product                                                                                                    : a1->{col35}",""
"FILTERGRID:"
"AND","","a0.building","=","'CD6'","",".","c","factoryflowoperationcutoff","a0->a0.[Building]",""
"AND","","a0.flow_name","Is Not Null","","",".","c","factoryflowoperationcutoff","a0->a0.[Flow Name]",""
"AND","","a1.terminated","=","'N'","","","c","f_lot","a1->f0.terminated",""
"AND","","a1.quantity",">","0","","","n","f_lot","a1->f0.qty1",""
"AND","","a1.src_erase_date","Is Null","","","","d","f_lot","a1->f0.src_erase_date",""
"AND","","a1.operation","In Temp","{View (a0)} : View->a0.operation","","","c","f_lot","a1->f0.operation","a0->{col12}"
"AND","","a1.prodgroup3","In Temp"," {View (a0)} : View->a0.process_family","","","c","f_product","a1->p.prodgroup3","a0->{col13}"
"AND","","a1.owner","=","'PROD'","","","c","f_lot","a1->f0.owner",""
"AND","","a1.lot","Not Like","'%DUM%'","",".","c","f_lot","a1->f0.lot",""
"AND","","a1.onhold","!=","'Y'","","","c","f_lot","a1->f0.onhold",""













/END_EMBED
/EMBED=VG2;SHIFT_INFO
"VERSION:","1.0"
"OUTERJOIN:","Yes"
"UNIONSORT:","No"
"DISTINCT:","Yes"
"QUOTECSV:","No"
"CTMISSJOIN:","No"
"EMPTYNULL:","No"
"TERMINAL:","Yes"
"OUTENABLED:","Yes"
"INLINE_VIEW:",""
"LASTPACKEDEXE:",""
"EXCEL:","SHIFT_INFO.csv"
"ROW:","No"
"EMBED:","Y"
"JOINDUCKDB:","N"
"INCNESTUTIL:","N"
"QUERYROWS:","5"
"JOINROWS:","0"
"FILTERROWS:","1"
"COL_ID_COUNTER:","5"
"CHART_COUNTER:","0"
"PIVOTMODE:","0"
"SQLITESPECIALHDRS:","1"
"LEGACYPIVOTHDRS:","0"
"USEPYENGINE:","Y"
"GLOBALS_FILE:",""
"GLOBAL_VARS:","-1"
"<---- New Query ---->","1:5:SQL"
"TABLEGRID:","1"
"","calendar_raw_CD.tab a0",""
"MARSNODE:","Default"
"ARIESNODE:","Default"
"OASYSNODE:","Default"
"ARIESCLASSNODE:","ATD.ARIES"
"OTHERNODE:","TEXT (SQLite)"
"MARSSCHEMA:","Default"
"DATABASETYPE:","SQLite"
"SINGLENODE:","TEXT (SQLite)"
"SINGLESCHEMA:","N/A"
"PROMPT-TEXT:","Fetching Text (SQLite) Data"
"DISTINCT:","No"
"ROW:","No"
"EXCEL:","No"
"CT_MISS_VAL:","No"
"PREPROCESS_CSV:","No"
"NOHDRS:","No"
"CARTESIAN:","No"
"<---- New Query ---->","-99"
"QUERYGRID:"
"a0.ww_shift","ww_shift","Y","None","None","Row","c","","csv","SQL->a0.[ww_shift]","col1"
"a0.start_date","start_date","Y","Asc","None","Row","c","","csv","SQL->a0.[start_date]","col2"
"a0.end_date","end_date","Y","None","None","Row","c","","csv","SQL->a0.[end_date]","col3"
"f(x)->Datetime('now','localtime')","current_time","Y","None","None","Row","C","***","","SQL->Datetime('now','localtime')","col4"
"f(x)->SPF_FN$Date_Diff( {start_date}, {current_time} )","start_current","Y","None","None","Row","N","***","@if@1","SQL->SPF_FN$Date_Diff( {col2}, {col4} )","col5"
"JOINGRID:"
"FILTERGRID:"
"AND","","f(x)->{start_current}","Between","-0.5","","","nx","@IF@2","SQL->{col5}","1.5"














/END_EMBED
/EMBED=VG2;CREATE_MIN_MAX_TEMPLATE
"VERSION:","1.0"
"OUTERJOIN:","Yes"
"UNIONSORT:","No"
"DISTINCT:","No"
"QUOTECSV:","No"
"CTMISSJOIN:","No"
"EMPTYNULL:","No"
"TERMINAL:","Yes"
"OUTENABLED:","Yes"
"INLINE_VIEW:",""
"LASTPACKEDEXE:",""
"EXCEL:","out_10847.tab"
"ROW:","No"
"EMBED:","Y"
"JOINDUCKDB:","N"
"INCNESTUTIL:","N"
"QUERYROWS:","0"
"JOINROWS:","0"
"FILTERROWS:","0"
"COL_ID_COUNTER:","0"
"CHART_COUNTER:","0"
"PIVOTMODE:","0"
"SQLITESPECIALHDRS:","1"
"LEGACYPIVOTHDRS:","0"
"USEPYENGINE:","Y"
"GLOBALS_FILE:",""
"GLOBAL_VARS:","-1"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Write-File:Ymin_max.py<SOF><{><}>import pandas as pd<{><}>import math<{><}><{><}>df_CONFIG = pd.read_csv('config.tab', sep='\t')<{><}>df_DEST_GOAL = pd.read_csv('DEST_GOAL_BY_ENTITY.csv')<{><}><{><}>df_ALL_WIP = pd.read_csv(f'ALL_WIP.csv')<{><}>df_ALL_WIP['WIP'] = df_ALL_WIP['WIP'].fillna(0)<{><}><{><}>df_MOR = pd.read_csv('MOR.csv')<{><}>df_MOR.columns = df_MOR.columns.str.upper()<{><}><{><}>df_SHIFT = pd.read_csv('SHIFT_INFO.csv')<{><}><{><}>shift = df_SHIFT.sort_values(by='ww_shift')['ww_shift'].unique()<{><}>n_shift, n_1_shift, n_2_shift = shift[0], shift[1], shift[2]<{><}>remaining_qrts = math.ceil(48 + df_SHIFT.loc[0, 'start_current'] * 24 * 4)<{><}><{><}>Day_Shift = []<{><}>for hour in range(7, 19):<{><}>    for minute in range(0, 60, 15):<{><}>        Day_Shift.append('{:02d}:{:02d}'.format(hour, minute))<{><}><{><}>Night_Shift = []<{><}><{><}>for hour in range(19, 24):<{><}>    for minute in range(0, 60, 15):<{><}>        Night_Shift.append('{:02d}:{:02d}'.format(hour, minute))<{><}>for hour in range(0, 7):<{><}>    for minute in range(0, 60, 15):<{><}>        Night_Shift.append('{:02d}:{:02d}'.format(hour, minute))<{><}><{><}>actual_time = []<{><}><{><}>if n_shift[-1] == 'D':<{><}>    actual_time += Day_Shift[-remaining_qrts:] + \<{><}>        Night_Shift[:48-remaining_qrts]<{><}>else:<{><}>    actual_time += Night_Shift[-remaining_qrts:] + \<{><}>        Day_Shift[:48-remaining_qrts]<{><}><{><}><{><}>def create_template(product, dest_oper, dest_wip_oper, module):<{><}><{><}>    n_shift = df_SHIFT.sort_values(by='ww_shift')['ww_shift'].unique()[0]<{><}>    n_1_shift = df_SHIFT.sort_values(by='ww_shift')['ww_shift'].unique()[1]<{><}>    n_2_shift = df_SHIFT.sort_values(by='ww_shift')['ww_shift'].unique()[2]<{><}><{><}>    temp = df_ALL_WIP[(df_ALL_WIP['prod'] == product)].sort_values(by='seq_num')<{><}>    temp = temp.reset_index(drop=True)<{><}><{><}>    start = temp.index[temp['operation'].isin([2170,2173])].values[0]<{><}><{><}>    <{><}><{><}>    end = temp.index[temp['operation'] == dest_wip_oper].values[0]<{><}><{><}>    tpt = temp.iloc[start:end]['ct_goal'].sum()<{><}><{><}>    if dest_wip_oper == 599:<{><}>        tpt += 1<{><}><{><}>    n_shift_qrts = math.ceil(48 + df_SHIFT.loc[0, 'start_current']*24*4)<{><}><{><}>    if 48 + (tpt)*4 - n_shift_qrts <= 48:  # n_shift + n_1_shift<{><}>        n_1_shift_qrts = 48 + (tpt)*4 - n_shift_qrts<{><}>        n_2_shift_qrts = 0<{><}><{><}>    else:  # n_shift, n_1_shift, n_2_shift<{><}>        n_1_shift_qrts = 48<{><}>        n_2_shift_qrts = 48 + (tpt)*4 - n_shift_qrts - 48<{><}><{><}>    df = pd.DataFrame(columns=['SHIFT', 'TIME_SLOT',<{><}>                      'DEST_GOAL', 'DEST_WIP', 'MIN', 'MAX', 'AVAIL_WIP'])<{><}>    df['SHIFT'] = [n_shift] * n_shift_qrts + [n_1_shift] * \<{><}>        n_1_shift_qrts + [n_2_shift] * n_2_shift_qrts<{><}>    df['TIME_SLOT'] = [i for i in range(1, len(df)+1)]<{><}>    df['DEST_GOAL'] = 0<{><}>    df['DEST_GOAL'] = df['DEST_GOAL'].astype('float64')<{><}><{><}>    # Add Destination Goal By Shift&Entity<{><}><{><}>    temp_goal = df_DEST_GOAL[(df_DEST_GOAL['product'] == product)].copy()<{><}><{><}>    for idx, row in temp_goal.iterrows():<{><}><{><}>        qrts_goal = row['goal']/row['actual_tr_qrts']<{><}><{><}>        if row['shift'] == n_shift:<{><}><{><}>            qrts_start, qrts_end = row['start'], row['end']<{><}><{><}>            df.loc[(df['SHIFT'] == row['shift']) & (df['TIME_SLOT'] >= qrts_start) & (<{><}>                df['TIME_SLOT'] <= qrts_end), 'DEST_GOAL'] += qrts_goal<{><}><{><}>        elif row['shift'] == n_1_shift:<{><}>            qrts_start, qrts_end = row['start'] + \<{><}>                remaining_qrts, row['end'] + remaining_qrts<{><}><{><}>            df.loc[(df['SHIFT'] == row['shift']) & (df['TIME_SLOT'] >= qrts_start) & (<{><}>                df['TIME_SLOT'] <= qrts_end), 'DEST_GOAL'] += qrts_goal<{><}><{><}>        elif row['shift'] == n_2_shift:<{><}>            qrts_start, qrts_end = row['start'] + \<{><}>                remaining_qrts + 48, row['end'] + remaining_qrts + 48<{><}><{><}>            df.loc[(df['SHIFT'] == row['shift']) & (df['TIME_SLOT'] >= qrts_start) & (<{><}>                df['TIME_SLOT'] <= qrts_end), 'DEST_GOAL'] += qrts_goal<{><}><{><}>    # Add Destination WIP<{><}><{><}>    filt = (df_ALL_WIP['prod'] == product) & (df_ALL_WIP['operation'] == dest_wip_oper)<{><}><{><}>    try:<{><}>        df.loc[0, 'DEST_WIP'] = round(<{><}>            df_ALL_WIP.loc[filt, 'WIP'].values[0]/1000, 3)<{><}>    except:<{><}>        df.loc[0, 'DEST_WIP'] = 0<{><}><{><}>    for idx, row in df[1:].iterrows():<{><}>        df.loc[idx, 'DEST_WIP'] = df.loc[idx-1,<{><}>                                         'DEST_WIP'] - df.loc[idx-1, 'DEST_GOAL']<{><}><{><}>    # Add MIN Constraint<{><}><{><}>    for idx, row in df[:48].iterrows():<{><}>        goal, wip = df.loc[idx+tpt*4,<{><}>                           'DEST_GOAL'], df.loc[idx+tpt*4, 'DEST_WIP']<{><}>        if goal <= wip:<{><}>            df.loc[idx, 'MIN'] = 0<{><}>        else:<{><}>            df.loc[idx, 'MIN'] = abs(goal-wip)<{><}><{><}>    # Add MAX Constraint<{><}><{><}>    for idx, row in df[:48].iterrows():<{><}><{><}>        goal, wip = df.loc[idx+(tpt)*4,<{><}>                           'DEST_GOAL'], df.loc[idx+(tpt)*4, 'DEST_WIP']<{><}><{><}>        if goal <= wip:<{><}>            df.loc[idx, 'MAX'] = 0<{><}>        else:<{><}>            df.loc[idx, 'MAX'] = abs(goal-wip)<{><}><{><}>    # Add avail WIP (current+incoming)<{><}><{><}>    incoming_WIP = {}<{><}><{><}>    try:<{><}>        seq_start = df_ALL_WIP.loc[(df_ALL_WIP['prod'] == product) & (df_ALL_WIP['operation'] == 2044), 'seq_num'].values[0]<{><}>    except:<{><}>        seq_start = df_ALL_WIP.loc[(df_ALL_WIP['prod'] == product) & (df_ALL_WIP['operation'] == 589), 'seq_num'].values[0]<{><}>    try:<{><}>        seq_end = df_ALL_WIP.loc[(df_ALL_WIP['prod'] == product) & (df_ALL_WIP['operation'] == 2170), 'seq_num'].values[0]<{><}>    except:<{><}>        seq_end = df_ALL_WIP.loc[(df_ALL_WIP['prod'] == product) & (df_ALL_WIP['operation'] == 2173), 'seq_num'].values[0]<{><}><{><}>    temp = df_ALL_WIP[(df_ALL_WIP['prod'] == product) & (df_ALL_WIP['seq_num'] < seq_end)].sort_values(by='seq_num')<{><}>    temp = temp.reset_index(drop=True)<{><}><{><}>    for idx, row in temp.iterrows():<{><}>        if row['WIP'] > 0:<{><}>            t = temp[temp['seq_num'] >= row['seq_num']]['ct_goal'].sum()<{><}>            incoming_WIP[t] = round(row['WIP']/1000, 3)<{><}><{><}>    current_wip = round(df_ALL_WIP[(df_ALL_WIP['prod'] == product) & (<{><}>        df_ALL_WIP['operation'].isin([2170, 2173]))]['WIP'].values[0]/1000, 3)<{><}><{><}>    for idx, row in df.iterrows():<{><}>        if row['TIME_SLOT'] <= 4:<{><}>            df.loc[idx, 'AVAIL_WIP'] = current_wip<{><}>        elif ((row['TIME_SLOT']-1)//4) in incoming_WIP.keys():<{><}>            df.loc[idx, 'AVAIL_WIP'] = current_wip + \<{><}>                incoming_WIP[((row['TIME_SLOT']-1)//4)]<{><}>        else:<{><}>            df.loc[idx, 'AVAIL_WIP'] = 0<{><}><{><}>    for idx, row in df[1:].iterrows():<{><}>        if row['AVAIL_WIP'] == 0:<{><}>            df.loc[idx, 'AVAIL_WIP'] = df.loc[idx - 1, 'AVAIL_WIP']<{><}><{><}>    inf_time = df_ALL_WIP[(df_ALL_WIP['prod'] == product)& (<{><}>        df_ALL_WIP['seq_num'] > seq_start) & (df_ALL_WIP['seq_num'] < seq_end)].sort_values(by='seq_num')['ct_goal'].sum()<{><}><{><}>    df.loc[(df['TIME_SLOT']-1)//4 >= inf_time, 'AVAIL_WIP'] = 1000000<{><}><{><}>    temp = df_ALL_WIP[(df_ALL_WIP['prod'] == product)].sort_values(by='seq_num')<{><}>    temp = temp.reset_index(drop=True)<{><}><{><}>    mor = df_MOR[(df_MOR['PRODGROUP3'] == product) & (<{><}>        df_MOR['CEID'].str.contains('ACL'))]['MOR'].values[0]<{><}><{><}>    df['MOR'] = mor<{><}>    for idx, row in df.iterrows():<{><}>        df.loc[idx, ['MIN_after_avail_wip', 'MAX_after_avail_wip']] = min(<{><}>            row['MIN'], row['AVAIL_WIP']), min(row['MAX'], row['AVAIL_WIP'])<{><}><{><}>    df['OUTPUT'] = 0<{><}><{><}>    df = df[:48]<{><}>    df['ACTUAL_TIME'] = actual_time<{><}>    df.to_csv(f'{product}_TO_{module}.csv', index=False)<{><}><{><}><{><}># In[5]:<{><}><{><}><{><}>for p in df_DEST_GOAL['product'].unique():<{><}><{><}>    dest_oper = df_CONFIG.loc[df_CONFIG['PRODUCT'] == p, 'DEST_OPER'].values[0]<{><}>    dest_wip_oper = df_CONFIG.loc[df_CONFIG['PRODUCT']<{><}>                                  == p, 'DEST_WIP_OPER'].values[0]<{><}>    module = df_CONFIG.loc[df_CONFIG['PRODUCT'] == p, 'TYPE'].values[0][-3:]<{><}>    create_template(p, dest_oper, dest_wip_oper, module)"
"UTILITIESDESC:","Write Text to a file. Optionally use <EOF> to mark end of file"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Python:Y@EXEDIR@\Run_Python_Script.va <~>min_max.py<~> <~><~> <~>N<~> <~><<<SPF-APP-SERVER>>><~> <~>Python-v3<~>"
"UTILITIESDESC:","Run Python script"
"<---- New Query ---->","-99"
"QUERYGRID:"
"JOINGRID:"
"FILTERGRID:"








/END_EMBED
/EMBED=VG2;DEST_GOAL_BY_ENTITY
"VERSION:","1.0"
"OUTERJOIN:","Yes"
"UNIONSORT:","No"
"DISTINCT:","No"
"QUOTECSV:","No"
"CTMISSJOIN:","No"
"EMPTYNULL:","No"
"TERMINAL:","Yes"
"OUTENABLED:","Yes"
"INLINE_VIEW:",""
"LASTPACKEDEXE:",""
"EXCEL:","out_24467.tab"
"ROW:","No"
"EMBED:","Y"
"JOINDUCKDB:","N"
"INCNESTUTIL:","N"
"QUERYROWS:","0"
"JOINROWS:","0"
"FILTERROWS:","0"
"COL_ID_COUNTER:","0"
"CHART_COUNTER:","0"
"PIVOTMODE:","0"
"SQLITESPECIALHDRS:","1"
"LEGACYPIVOTHDRS:","0"
"USEPYENGINE:","Y"
"GLOBALS_FILE:",""
"GLOBAL_VARS:","-1"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Write-File:Ydest_goal_by_entity.py<SOF><{><}>import pandas as pd<{><}>import numpy as np<{><}>import math<{><}><{><}><{><}>df_CONFIG = pd.read_csv('config.tab', sep='\t')<{><}>df_DEST_LOADING_PLAN = pd.read_csv('DEST_LOADING_PLAN.csv')<{><}>df_SHIFT = pd.read_csv('SHIFT_INFO.csv')<{><}><{><}><{><}>shift = df_SHIFT.sort_values(by='ww_shift')['ww_shift'].unique()<{><}>n_shift, n_1_shift, n_2_shift = shift[0], shift[1], shift[2]<{><}><{><}><{><}>remaining_qrts = math.ceil(48 + df_SHIFT.loc[0, 'start_current'] * 24 * 4)<{><}>df_result = pd.DataFrame(columns=['shift', 'entity', 'product', 'flow_name', 'operation',<{><}>                         'tr_hrs', 'tr_qrts', 'remaining_qrts', 'actual_tr_qrts', 'mor', 'start', 'end'])<{><}><{><}>df_PLAN = df_DEST_LOADING_PLAN.merge(df_CONFIG, how='left', left_on=[<{><}>                                     'prodgroup3', 'operation'], right_on=['PRODUCT', 'DEST_OPER'])<{><}><{><}>df_PLAN.to_csv('JOINED_PLAN.csv', index=False)<{><}><{><}>df_SHIFT_ENTITY = df_PLAN[df_PLAN['TYPE'].notnull(<{><}>)][['ww_shift', 'entity', 'operation']].sort_values(by=['ww_shift', 'entity', 'operation'])<{><}>df_SHIFT_ENTITY = df_SHIFT_ENTITY.drop_duplicates(ignore_index=True)<{><}><{><}>for idx, row in df_SHIFT_ENTITY.iterrows():<{><}><{><}>    temp = df_PLAN[(df_PLAN['ww_shift'] == row['ww_shift'])<{><}>                   & (df_PLAN['entity'] == row['entity'])]<{><}><{><}>    temp = temp.sort_values(by='seq')<{><}><{><}>    rem_qrts = remaining_qrts if row['ww_shift'] == n_shift else 48<{><}><{><}>    seq_list = list(temp['seq'].unique())<{><}>    seq_list.sort()<{><}><{><}>    # only seq1<{><}><{><}>    if len(seq_list) == 1:<{><}>        prod = temp['PRODUCT'].values[0]<{><}>        tr_hrs = round(temp['tr_hrs'].values[0]/1000, 2)<{><}>        tr_qrts = math.ceil(tr_hrs * 4)<{><}>        mor = temp['mor'].values[0]<{><}><{><}>        # special case: put 100 as goal -> arrange from shift end<{><}>        if temp['goal'].values[0] == 100:<{><}>            start, end = rem_qrts-1, rem_qrts<{><}><{><}>        else:<{><}>            actual_tr_qrts = min(rem_qrts, tr_qrts)<{><}>            start, end = 1, actual_tr_qrts<{><}><{><}>        flow_name = temp['flow_name'].values[0]<{><}><{><}>        df_result.loc[len(df_result)] = [row['ww_shift'], row['entity'], prod, flow_name,<{><}>                                         row['operation'], tr_hrs, tr_qrts, rem_qrts, actual_tr_qrts, mor, start, end]<{><}><{><}>    # seq1 + seq2<{><}><{><}>    elif len(seq_list) == 2:<{><}><{><}>        # seq1<{><}>        tr_hrs_seq1 = round(<{><}>            temp.loc[temp['seq'] == seq_list[0], 'tr_hrs'].values[0]/1000, 3)<{><}>        tr_qrts_seq1 = math.ceil(tr_hrs_seq1 * 4)<{><}><{><}>        if len(temp[(temp['seq'] == seq_list[0]) & (temp['PRODUCT'].notnull())]) > 0:<{><}><{><}>            prod_seq1 = temp.loc[temp['seq'] ==<{><}>                                 seq_list[0], 'PRODUCT'].values[0]<{><}>            mor_seq1 = temp.loc[temp['seq'] == seq_list[0], 'mor'].values[0]<{><}><{><}>            actual_tr_qrts_seq1 = min(rem_qrts, tr_qrts_seq1)<{><}>            start_seq1, end_seq1 = 1, actual_tr_qrts_seq1<{><}><{><}>            flow_name_seq1 = temp.loc[temp['seq'] ==<{><}>                                      seq_list[0], 'flow_name'].values[0]<{><}><{><}>            df_result.loc[len(df_result)] = [row['ww_shift'], row['entity'], prod_seq1, flow_name_seq1, row['operation'],<{><}>                                             tr_hrs_seq1, tr_qrts_seq1, rem_qrts, actual_tr_qrts_seq1, mor_seq1, start_seq1, end_seq1]<{><}><{><}>        # seq2<{><}>        if tr_qrts_seq1 < remaining_qrts:<{><}><{><}>            tr_hrs_seq2 = round(temp.loc[temp['seq'] ==<{><}>                                         seq_list[1], 'tr_hrs'].values[0]/1000, 3)<{><}><{><}>            tr_qrts_seq2 = math.ceil(tr_hrs_seq2 * 4)<{><}><{><}>            if len(temp[(temp['seq'] == seq_list[1]) & (temp['PRODUCT'].notnull())]) > 0:<{><}><{><}>                prod_seq2 = temp.loc[temp['seq'] ==<{><}>                                     seq_list[1], 'PRODUCT'].values[0]<{><}>                mor_seq2 = temp.loc[temp['seq'] ==<{><}>                                    seq_list[1], 'mor'].values[0]<{><}><{><}>                actual_tr_qrts_seq2 = min(<{><}>                    rem_qrts - tr_qrts_seq1, tr_qrts_seq2)<{><}><{><}>                if tr_qrts_seq2 >= rem_qrts - tr_qrts_seq1:<{><}>                    start_seq2, end_seq2 = tr_qrts_seq1 + 1, rem_qrts<{><}><{><}>                else:<{><}>                    start_seq2, end_seq2 = rem_qrts-tr_qrts_seq2, rem_qrts<{><}><{><}>                flow_name_seq2 = temp.loc[temp['seq']<{><}>                                          == seq_list[1], 'flow_name'].values[0]<{><}><{><}>                df_result.loc[len(df_result)] = [row['ww_shift'], row['entity'], prod_seq2, flow_name_seq2, row['operation'],<{><}>                                                 tr_hrs_seq2, tr_qrts_seq2, rem_qrts, actual_tr_qrts_seq2, mor_seq2, start_seq2, end_seq2]<{><}><{><}>    # seq1 + seq2 + seq3<{><}><{><}>    elif len(seq_list) == 3:<{><}><{><}>        # seq1<{><}>        tr_hrs_seq1 = round(<{><}>            temp.loc[temp['seq'] == seq_list[0], 'tr_hrs'].values[0]/1000, 3)<{><}>        tr_qrts_seq1 = math.ceil(tr_hrs_seq1 * 4)<{><}><{><}>        if len(temp[(temp['seq'] == 1) & (temp['PRODUCT'].notnull())]) > 0:<{><}><{><}>            prod_seq1 = temp.loc[temp['seq'] ==<{><}>                                 seq_list[0], 'PRODUCT'].values[0]<{><}>            mor_seq1 = temp.loc[temp['seq'] == seq_list[0], 'mor'].values[0]<{><}><{><}>            actual_tr_qrts_seq1 = min(rem_qrts, tr_qrts_seq1)<{><}>            start_seq1, end_seq1 = 1, actual_tr_qrts_seq1<{><}><{><}>            flow_name_seq1 = temp.loc[temp['seq'] ==<{><}>                                      seq_list[0], 'flow_name'].values[0]<{><}><{><}>            df_result.loc[len(df_result)] = [row['ww_shift'], row['entity'], prod_seq1, flow_name_seq1, row['operation'],<{><}>                                             tr_hrs_seq1, tr_qrts_seq1, rem_qrts, actual_tr_qrts_seq1, mor_seq1, start_seq1, end_seq1]<{><}><{><}>        # seq2<{><}>        if tr_qrts_seq1 < rem_qrts:<{><}><{><}>            tr_hrs_seq2 = round(temp.loc[temp['seq'] ==<{><}>                                         seq_list[1], 'tr_hrs'].values[0]/1000, 3)<{><}>            tr_qrts_seq2 = math.ceil(tr_hrs_seq2 * 4)<{><}><{><}>            if len(temp[(temp['seq'] == seq_list[1]) & (temp['PRODUCT'].notnull())]) > 0:<{><}><{><}>                prod_seq2 = temp.loc[temp['seq'] ==<{><}>                                     seq_list[1], 'PRODUCT'].values[0]<{><}>                mor_seq2 = temp.loc[temp['seq'] ==<{><}>                                    seq_list[1], 'mor'].values[0]<{><}><{><}>                actual_tr_qrts_seq2 = min(rem_qrts - tr_qrts_seq1, rem_qrts)<{><}><{><}>                if tr_qrts_seq2 >= rem_qrts - tr_qrts_seq1:<{><}>                    start_seq2, end_seq2 = tr_qrts_seq1 + 1, rem_qrts<{><}>                else:<{><}>                    start_seq2 = tr_qrts_seq1 + 1<{><}>                    end_seq2 = start_seq2 + tr_qrts_seq2 - 1<{><}><{><}>                flow_name_seq2 = temp.loc[temp['seq']<{><}>                                          == seq_list[1], 'flow_name'].values[0]<{><}><{><}>                df_result.loc[len(df_result)] = [row['ww_shift'], row['entity'], prod_seq2, flow_name_seq2, row['operation'],<{><}>                                                 tr_hrs_seq2, tr_qrts_seq2, rem_qrts, actual_tr_qrts_seq2, mor_seq2, start_seq2, end_seq2]<{><}><{><}>        # seq3<{><}>        if (tr_qrts_seq1 + tr_qrts_seq2) < rem_qrts:<{><}><{><}>            tr_hrs_seq3 = round(temp.loc[temp['seq'] ==<{><}>                                         seq_list[2], 'tr_hrs'].values[0]/1000, 3)<{><}>            tr_qrts_seq3 = math.ceil(tr_hrs_seq3 * 4)<{><}><{><}>            if len(temp[(temp['seq'] == seq_list[2]) & (temp['PRODUCT'].notnull())]) > 0:<{><}><{><}>                prod_seq3 = temp.loc[temp['seq'] ==<{><}>                                     seq_list[2], 'PRODUCT'].values[0]<{><}>                mor_seq3 = temp.loc[temp['seq'] ==<{><}>                                    seq_list[2], 'mor'].values[0]<{><}><{><}>                if tr_qrts_seq3 >= rem_qrts - tr_qrts_seq1 - tr_qrts_seq2:<{><}>                    actual_tr_qrts_seq3 = rem_qrts - tr_qrts_seq1 - tr_qrts_seq2<{><}>                    start_seq3, end_seq3 = tr_qrts_seq1 + tr_qrts_seq2 + 1, rem_qrts<{><}>                else:<{><}>                    actual_tr_qrts_seq3 = tr_qrts_seq3<{><}>                    start_seq3 = rem_qrts - tr_qrts_seq3<{><}>                    end_seq3 = rem_qrts<{><}><{><}>                flow_name_seq3 = temp.loc[temp['seq']<{><}>                                          == seq_list[2], 'flow_name'].values[0]<{><}><{><}>                df_result.loc[len(df_result)] = [row['ww_shift'], row['entity'], prod_seq3, flow_name_seq3, row['operation'],<{><}>                                                 tr_hrs_seq3, tr_qrts_seq3, rem_qrts, actual_tr_qrts_seq3, mor_seq3, start_seq3, end_seq3]<{><}><{><}><{><}># In[10]:<{><}><{><}><{><}>df_result = df_result[df_result['tr_hrs'] != 0]<{><}><{><}><{><}># In[12]:<{><}><{><}>for idx, row in df_result.iterrows():<{><}>    if row['tr_qrts'] >= row['remaining_qrts']:<{><}>        df_result.loc[idx, 'goal'] = row['mor'] * row['actual_tr_qrts']/48<{><}>    else:<{><}>        df_result.loc[idx, 'goal'] = row['mor'] * row['tr_hrs']/12<{><}><{><}>df_result['goal'] = round(df_result['goal'], 3)<{><}><{><}><{><}># In[13]:<{><}><{><}>df_result = df_result[df_result['actual_tr_qrts'] > 0]<{><}>df_result.to_csv('DEST_GOAL_BY_ENTITY.csv', index=False)"
"UTILITIESDESC:","Write Text to a file. Optionally use <EOF> to mark end of file"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Python:Y@EXEDIR@\Run_Python_Script.va <~>dest_goal_by_entity.py<~> <~><~> <~>N<~> <~><<<SPF-APP-SERVER>>><~> <~>Python-v3<~>"
"UTILITIESDESC:","Run Python script"
"<---- New Query ---->","-99"
"QUERYGRID:"
"JOINGRID:"
"FILTERGRID:"








/END_EMBED
/EMBED=VG2;CheckCurrentTimeDifference
"VERSION:","1.0"
"OUTERJOIN:","Yes"
"UNIONSORT:","No"
"DISTINCT:","Yes"
"QUOTECSV:","No"
"CTMISSJOIN:","No"
"EMPTYNULL:","No"
"TERMINAL:","Yes"
"OUTENABLED:","Yes"
"INLINE_VIEW:",""
"LASTPACKEDEXE:",""
"EXCEL:","TimeDifference.csv"
"ROW:","No"
"EMBED:","Y"
"JOINDUCKDB:","N"
"INCNESTUTIL:","N"
"QUERYROWS:","10"
"JOINROWS:","0"
"FILTERROWS:","3"
"COL_ID_COUNTER:","98"
"CHART_COUNTER:","0"
"PIVOTMODE:","0"
"SQLITESPECIALHDRS:","1"
"LEGACYPIVOTHDRS:","0"
"USEPYENGINE:","Y"
"GLOBALS_FILE:",""
"GLOBAL_VARS:","-1"
"<---- New Query ---->","2:0:a0"
"TABLEGRID:","1"
"","Calendar_Data",""
"MARSNODE:","Default"
"ARIESNODE:","Default"
"OASYSNODE:","Default"
"ARIESCLASSNODE:","ATD.ARIES"
"OTHERNODE:","CD.Antares"
"MARSSCHEMA:","Default"
"DATABASETYPE:","Oracle"
"SINGLENODE:","Default"
"SINGLESCHEMA:","Default"
"PROMPT-TEXT:","Fetching MARS Data"
"DISTINCT:","No"
"ROW:","No"
"EXCEL:","No"
"CT_MISS_VAL:","No"
"PARALLEL:","0"
"IGNOREINCSUM:","No"
"FIRST_ROWS:","No"
"ORDERED:","No"
"OTHER-HINT:","No"
"<---- New Query ---->","-99"
"QUERYGRID:"
"a0.ww","ww","P","None","None","Row","n","The facility work week for the given interval in the format yyyyww.  For example: 199745","f_calendar","a0->c0.ww","col98"
"f(a0)->SUBSTR( {ww}  ,1,4)","year","Y","None","None","Row","C","***","f_calendar","a0->SUBSTR( {col98}  ,1,4)","col26"
"f(a0)->CASE WHEN  {dow}=1 and  {shiftno} =2  THEN 'WW' || SUBSTR( {ww}-1 ,5,2)  ELSE 'WW' || SUBSTR( {ww} ,5,2) END","week","Y","None","None","Row","C","***","f_calendar","a0->CASE WHEN  {col69}=1 and  {col74} =2  THEN 'WW' || SUBSTR( {col98}-1 ,5,2)  ELSE 'WW' || SUBSTR( {col98} ,5,2) END","col27"
"a0.dow","dow","P","None","None","Row","n","Manual Entry.  Valid range is 1-7. (Sunday = 1, Saturday = 7)","f_calendar","a0->c0.dow","col69"
"a0.start_date","start_date","P","None","None","Row","d","A calendar date/time for the start of this interval.","f_calendar","a0->c0.start_date","col71"
"a0.end_date","end_date","P","None","None","Row","d","A calendar date/time for the end of this interval.","f_calendar","a0->c0.end_date","col72"
"f(a0)->CASE WHEN  {shiftno} = 2 AND  {dow} = 1 THEN {week} || '.' || TO_CHAR( {dow}+5) || 'N' WHEN  {shiftno}=1  THEN {week} || '.' || TO_CHAR( {dow} - 1 ) || 'D'!!!!!ELSE {week} || '.' || TO_CHAR( {dow} -2) || 'N' END","shift","Y","None","None","Row","C","***","@if@1","a0->CASE WHEN  {col74} = 2 AND  {col69} = 1 THEN {col27} || '.' || TO_CHAR( {col69}+5) || 'N' WHEN  {col74}=1  THEN {col27} || '.' || TO_CHAR( {col69} - 1 ) || 'D'!!!!!ELSE {col27} || '.' || TO_CHAR( {col69} -2) || 'N' END","col73"
"a0.shiftno","shiftno","P","None","None","Row","n","The shift number for the day as it corresponds to the F_Facility table. Shifts are ordered in ascending order by start time.","f_calendar","a0->c0.shiftno","col74"
"f(a0)->SPF_FN$Date_Diff(SYSDATE, {start_date})*24","date_difference","Y:2","Desc","None","Row","N","***","f_calendar","a0->SPF_FN$Date_Diff(SYSDATE, {col71})*24","col95"
"f(a0)->CASE !!!!!WHEN  {date_difference} >12 and  {date_difference} <=24  THEN 'N-1' !!!!!WHEN  {date_difference} >0 and  {date_difference} <=12  THEN 'N' !!!!!WHEN  {date_difference} <0 and  {date_difference} >= -12  THEN 'N+1' !!!!!WHEN  {date_difference} <0 and  {date_difference} >= -24  THEN 'N+2' !!!!!WHEN  {date_difference} <0 and  {date_difference} >= -36  THEN 'N+3' !!!!!WHEN  {date_difference} <0 and  {date_difference} >= -48  THEN 'N+4' !!!!!WHEN  {date_difference} <0 and  {date_difference} >= -60  THEN 'N+5' !!!!!WHEN  {date_difference} <0 and  {date_difference} >= -72  THEN 'N+6' !!!!!WHEN  {date_difference} <0 and  {date_difference} >= -84  THEN 'N+7' !!!!!WHEN  {date_difference} <0 and  {date_difference} >= -96  THEN 'N+8' !!!!!WHEN  {date_difference} <0 and  {date_difference} >= -108 THEN 'N+9' !!!!!WHEN  {date_difference} <0 and  {date_difference} >= -120 THEN 'N+10' !!!!!WHEN  {date_difference} <0 and  {date_difference} >= -132 THEN 'N+11' !!!!!WHEN  {date_difference} <0 and  {date_difference} >= -144 THEN 'N+12' !!!!!WHEN  {date_difference} <0 and  {date_difference} >= -156 THEN 'N+13' !!!!!WHEN  {date_difference} <0 and  {date_difference} >= -168 THEN 'N+14'!!!!!WHEN  {date_difference} <0 and  {date_difference} >= -180 THEN 'N+15'  !!!!!WHEN  {date_difference} <0 and  {date_difference} >= -192 THEN 'N+16'!!!!!WHEN  {date_difference} <0 and  {date_difference} >= -204 THEN 'N+17' !!!!!WHEN  {date_difference} <0 and  {date_difference} >= -216 THEN 'N+18' !!!!!WHEN  {date_difference} <0 and  {date_difference} >= -228 THEN 'N+19' !!!!!WHEN  {date_difference} <0 and  {date_difference} >= -240 THEN 'N+20' !!!!!WHEN  {date_difference} <0 and  {date_difference} >= -252 THEN 'N+21' !!!!!WHEN  {date_difference} <0 and  {date_difference} >= -264 THEN 'N+22' !!!!!WHEN  {date_difference} <0 and  {date_difference} >= -276 THEN 'N+23'!!!!!WHEN  {date_difference} <0 and  {date_difference} >= -288 THEN 'N+24'!!!!!WHEN  {date_difference} <0 and  {date_difference} >= -300 THEN 'N+25' !!!!!WHEN  {date_difference} <0 and  {date_difference} >= -312 THEN 'N+26'!!!!!WHEN  {date_difference} <0 and  {date_difference} >= -324 THEN 'N+27' !!!!!WHEN  {date_difference} <0 and  {date_difference} >= -336 THEN 'N+28' !!!!!ELSE NULL END","shift_seq","Y","None","None","Row","C","***","@if@1","a0->CASE !!!!!WHEN  {col95} >12 and  {col95} <=24  THEN 'N-1' !!!!!WHEN  {col95} >0 and  {col95} <=12  THEN 'N' !!!!!WHEN  {col95} <0 and  {col95} >= -12  THEN 'N+1' !!!!!WHEN  {col95} <0 and  {col95} >= -24  THEN 'N+2' !!!!!WHEN  {col95} <0 and  {col95} >= -36  THEN 'N+3' !!!!!WHEN  {col95} <0 and  {col95} >= -48  THEN 'N+4' !!!!!WHEN  {col95} <0 and  {col95} >= -60  THEN 'N+5' !!!!!WHEN  {col95} <0 and  {col95} >= -72  THEN 'N+6' !!!!!WHEN  {col95} <0 and  {col95} >= -84  THEN 'N+7' !!!!!WHEN  {col95} <0 and  {col95} >= -96  THEN 'N+8' !!!!!WHEN  {col95} <0 and  {col95} >= -108 THEN 'N+9' !!!!!WHEN  {col95} <0 and  {col95} >= -120 THEN 'N+10' !!!!!WHEN  {col95} <0 and  {col95} >= -132 THEN 'N+11' !!!!!WHEN  {col95} <0 and  {col95} >= -144 THEN 'N+12' !!!!!WHEN  {col95} <0 and  {col95} >= -156 THEN 'N+13' !!!!!WHEN  {col95} <0 and  {col95} >= -168 THEN 'N+14'!!!!!WHEN  {col95} <0 and  {col95} >= -180 THEN 'N+15'  !!!!!WHEN  {col95} <0 and  {col95} >= -192 THEN 'N+16'!!!!!WHEN  {col95} <0 and  {col95} >= -204 THEN 'N+17' !!!!!WHEN  {col95} <0 and  {col95} >= -216 THEN 'N+18' !!!!!WHEN  {col95} <0 and  {col95} >= -228 THEN 'N+19' !!!!!WHEN  {col95} <0 and  {col95} >= -240 THEN 'N+20' !!!!!WHEN  {col95} <0 and  {col95} >= -252 THEN 'N+21' !!!!!WHEN  {col95} <0 and  {col95} >= -264 THEN 'N+22' !!!!!WHEN  {col95} <0 and  {col95} >= -276 THEN 'N+23'!!!!!WHEN  {col95} <0 and  {col95} >= -288 THEN 'N+24'!!!!!WHEN  {col95} <0 and  {col95} >= -300 THEN 'N+25' !!!!!WHEN  {col95} <0 and  {col95} >= -312 THEN 'N+26'!!!!!WHEN  {col95} <0 and  {col95} >= -324 THEN 'N+27' !!!!!WHEN  {col95} <0 and  {col95} >= -336 THEN 'N+28' !!!!!ELSE NULL END","col96"
"JOINGRID:"
"FILTERGRID:"
"AND","","a0.start_date",">=","TRUNC(SYSDATE)-0.5","",".","d","f_calendar","a0->c0.start_date",""
"AND","","a0.start_date","<=","TRUNC(SYSDATE) + 14","",".","d","f_calendar","a0->c0.start_date",""
"AND","","f(a0)->{date_difference}","Between","0","","","nx","@IF@1","a0->{col95}","0.5"







/END_EMBED
/EMBED=VG2;DEST_OUTPUT
"VERSION:","1.0"
"OUTERJOIN:","Yes"
"UNIONSORT:","No"
"DISTINCT:","Yes"
"QUOTECSV:","No"
"CTMISSJOIN:","No"
"EMPTYNULL:","No"
"TERMINAL:","No"
"OUTENABLED:","Yes"
"INLINE_VIEW:",""
"LASTPACKEDEXE:",""
"EXCEL:","DEST_OUTPUT.csv"
"ROW:","No"
"EMBED:","Y"
"JOINDUCKDB:","N"
"INCNESTUTIL:","N"
"QUERYROWS:","16"
"JOINROWS:","2"
"FILTERROWS:","5"
"COL_ID_COUNTER:","63"
"CHART_COUNTER:","0"
"PIVOTMODE:","0"
"SQLITESPECIALHDRS:","1"
"LEGACYPIVOTHDRS:","0"
"USEPYENGINE:","Y"
"GLOBALS_FILE:",""
"GLOBAL_VARS:","-1"
"<---- New Query ---->","1:5:SQL"
"TABLEGRID:","1"
"","calendar_raw_CD.tab a0",""
"MARSNODE:","Default"
"ARIESNODE:","Default"
"OASYSNODE:","Default"
"ARIESCLASSNODE:","ATD.ARIES"
"OTHERNODE:","TEXT (SQLite)"
"MARSSCHEMA:","Default"
"DATABASETYPE:","SQLite"
"SINGLENODE:","TEXT (SQLite)"
"SINGLESCHEMA:","N/A"
"PROMPT-TEXT:","Fetching Text (SQLite) Data"
"DISTINCT:","No"
"ROW:","No"
"EXCEL:","No"
"CT_MISS_VAL:","No"
"PREPROCESS_CSV:","No"
"NOHDRS:","No"
"CARTESIAN:","No"
"<---- New Query ---->","2:0:a1"
"TABLEGRID:","1"
"","F_Lot_History_v3",""
"MARSNODE:","Default"
"ARIESNODE:","Default"
"OASYSNODE:","Default"
"ARIESCLASSNODE:","ATD.ARIES"
"OTHERNODE:","TEXT (SQLite)"
"MARSSCHEMA:","Default"
"DATABASETYPE:","Oracle"
"SINGLENODE:","Default"
"SINGLESCHEMA:","Default"
"PROMPT-TEXT:","Fetching MARS Data"
"DISTINCT:","Yes"
"ROW:","No"
"EXCEL:","No"
"CT_MISS_VAL:","No"
"PARALLEL:","0"
"IGNOREINCSUM:","No"
"FIRST_ROWS:","No"
"ORDERED:","No"
"OTHER-HINT:","No"
"<---- New Query ---->","-99"
"QUERYGRID:"
"a0.ww_shift","ww_shift","Y","None","None","Row","c","","csv","SQL->a0.[ww_shift]","col1"
"a0.calcudf1","calcudf1","Y","None","None","Row","c","","csv","SQL->a0.[calcudf1]","col2"
"a0.start_date","start_date","P","None","None","Row","c","","csv","SQL->a0.[start_date]","col3"
"a0.end_date","end_date","P","None","None","Row","c","","csv","SQL->a0.[end_date]","col4"
"f(x)->Datetime('now','localtime')","nowtime","P","None","None","Row","H","***","","SQL->Datetime('now','localtime')","col5"
"f(x)->SPF_FN$Date_Diff({start_date},{nowtime})","startdate_sysdate","P","None","None","Row","N","***","@if@1","SQL->SPF_FN$Date_Diff({col3},{col5})","col6"
"a1.prodgroup3","prodgroup3","Y","None","None","Row","c","Product Classification column.","f_product","a1->p.prodgroup3","col60"
"f(a1)->CASE WHEN  {prodgroup3} LIKE '%PP-%' THEN  REPLACE( {prodgroup3} ,'PP-','')  ELSE  {prodgroup3}  END","pd3","Y","None","None","Row","C","***","f_product","a1->CASE WHEN  {col60} LIKE '%PP-%' THEN  REPLACE( {col60} ,'PP-','')  ELSE  {col60}  END","col63"
"a1.lot","lot","P","None","None","Row","c","Identifies a batch of wafers or units being processed in the factory.The basic format of the Lot number is: ?FYWWNNNN where F=fab code, Y=year, WW=workweek, NNNN= sequence, with the 9th or 10th characters as alphanumeric. In Fab, Etest and Sort, a quantity that has a wafer as an unit of measure and the physical form that passes through the factory. A lot starting the Fab process contains up to 25 wafers and can be split into child lots of varying sizes, and wafer losses can also occur. New lots are also created to split lots due to varying characteristics, such as speed or rework, for a portion of the lot. In some 200mm fabs production lots, the lot number uses a silicon vendor ID in the 8th character","f_lothist","a1->f0.lot","col53"
"a1.operation","operation","Y","None","None","Row","c","Identifies a manufacturing process step or a holding point","f_lothist","a1->f0.operation","col54"
"a1.out_date","out_date","P","None","None","Row","d","The date the lot moved out of the operation. If the lot has not moved out, the value will be NULL. This column is used in date indices instead of Last_Action_Date as Last_Action_Date changes for every transaction for the lot at the operation.","f_lothist","a1->f0.out_date","col55"
"a1.movedout","movedout","P","None","None","Row","c","A flag that indicates if the lot has moved out of the current operation. Y means the lot has moved out. N means the lot is still at the operation.","f_lothist","a1->f0.movedout","col56"
"a1.newqty1","newqty1","P","None","None","Row","n","The number of wafers (or units) in the lot aftrer the last transaction was executed. Ultimately, it will equal the quantity of units in the lot when it is moved out of this operation.","f_lothist","a1->f0.newqty1","col57"
"a1.entity","entity","Y","None","None","Row","c","Typically identifies a piece of equipment though in some FACILITIES it might be a reticle ID. E.g., VDF027 might be the identifier for a diffusion tube at a GATE OXIDE operation.","f_entitylothist","a1->f4.entity","col58"
"f(x)->SPF_FN$Date_Diff( {start_date} , {out_date} )","startdate_outdate","P","None","None","Row","N","***","","All->SPF_FN$Date_Diff( {col3} , {col55} )","col59"
"f(x)->SUM ( {newqty1} ) OVER (PARTITION BY  {entity} , {operation} , {prodgroup3} )","output","Y","None","None","Row","N","***","","All->SUM ( {col57} ) OVER (PARTITION BY  {col58} , {col54} , {col60} )","col62"
"JOINGRID:"
"","","Sqlite->a0.start_date                                                                                                    : SQL->{col3}","<=","View->a1.out_date                                                                                                    : a1->{col55}",""
"","","Sqlite->a0.end_date                                                                                                    : SQL->{col4}",">=","View->a1.out_date                                                                                                    : a1->{col55}",""
"FILTERGRID:"
"AND","","f(x)->{startdate_sysdate}","Between","-0.5","","","nx","@IF@2","SQL->{col6}","0"
"AND","","f(x)->{startdate_outdate}","Between","-0.5","","","nx","@if@1","All->{col59}","0"
"AND","","a1.operation","In","'0510'</comma\>'1171'</comma\>'0971'</comma\>'1204'","","","c","f_lothist","a1->f0.operation",""
"AND","","a1.out_date",">=","(SYSDATE - 12/24)","",".","d","f_lothist","a1->f0.out_date",""
"AND","","a1.movedout","=","'Y'","","","c","f_lothist","a1->f0.movedout",""










/END_EMBED
/EMBED=VG2;getMOR
"VERSION:","1.0"
"OUTERJOIN:","Yes"
"UNIONSORT:","No"
"DISTINCT:","No"
"QUOTECSV:","No"
"CTMISSJOIN:","No"
"EMPTYNULL:","No"
"TERMINAL:","Yes"
"OUTENABLED:","Yes"
"INLINE_VIEW:",""
"LASTPACKEDEXE:",""
"EXCEL:","MOR.csv"
"ROW:","No"
"EMBED:","Y"
"JOINDUCKDB:","N"
"INCNESTUTIL:","N"
"QUERYROWS:","15"
"JOINROWS:","2"
"FILTERROWS:","0"
"COL_ID_COUNTER:","28"
"CHART_COUNTER:","0"
"PIVOTMODE:","0"
"SQLITESPECIALHDRS:","1"
"LEGACYPIVOTHDRS:","0"
"USEPYENGINE:","Y"
"GLOBALS_FILE:",""
"GLOBAL_VARS:","-1"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Pre/Post Query:Y{ATCDS_MOR}</@#;>MOR_ATCDS"
"UTILITIESDESC:","Pre/Post Query"
"<---- New Query ---->","1:5:SQL"
"TABLEGRID:","1"
"","MOR_ATCDS.csv a0",""
"MARSNODE:","Default"
"ARIESNODE:","Default"
"OASYSNODE:","Default"
"ARIESCLASSNODE:","ATD.ARIES"
"OTHERNODE:","TEXT (SQLite)"
"MARSSCHEMA:","Default"
"DATABASETYPE:","SQLite"
"SINGLENODE:","TEXT (SQLite)"
"SINGLESCHEMA:","N/A"
"PROMPT-TEXT:","Fetching Text (SQLite) Data"
"DISTINCT:","No"
"ROW:","No"
"EXCEL:","No"
"CT_MISS_VAL:","No"
"PREPROCESS_CSV:","No"
"NOHDRS:","No"
"CARTESIAN:","No"
"<---- New Query ---->","2:9:a1"
"TABLEGRID:","1"
"","Antares_Euph",""
"MARSNODE:","Default"
"ARIESNODE:","Default"
"OASYSNODE:","Default"
"ARIESCLASSNODE:","ATD.ARIES"
"OTHERNODE:","CD.Antares"
"MARSSCHEMA:","Default"
"DATABASETYPE:","SQLServer"
"SINGLENODE:","CD.Antares"
"SINGLESCHEMA:","N/A"
"PROMPT-TEXT:","Fetching Other Data"
"DISTINCT:","No"
"ROW:","No"
"EXCEL:","No"
"CT_MISS_VAL:","No"
"PARALLEL:","0"
"IGNOREINCSUM:","No"
"<---- New Query ---->","-99"
"QUERYGRID:"
"a0.prodgroup3","prodgroup3","Y","None","None","Row","c","","csv","SQL->a0.[prodgroup3]","col9"
"a0.resource_","resource_","P","None","None","Row","c","","csv","SQL->a0.[resource_]","col10"
"f(x)->SUBSTR(  {resource_}   ,1,3)  || UPPER( SUBSTR( {resource_}   ,4,1) )","ceid","Y","None","None","Row","C","***","csv","SQL->SUBSTR(  {col10}   ,1,3)  || UPPER( SUBSTR( {col10}   ,4,1) )","col24"
"a0.dlcp_proc","dlcp_proc","Y","None","None","Row","c","","csv","SQL->a0.[dlcp_proc]","col11"
"a0.operation_name","operation_name","Y","None","None","Row","c","","csv","SQL->a0.[operation_name]","col12"
"a0.euph","euph","Y","None","None","Row","c","","csv","SQL->a0.[euph]","col13"
"a0.gu","gu","Y","None","None","Row","c","","csv","SQL->a0.[gu]","col14"
"a0.mor","mor_1","Y","None","None","Row","c","","csv","SQL->a0.[mor]","col28"
"a0.common_name","common_name","P","None","None","Row","c","","csv","SQL->a0.[common_name]","col16"
"a1.product_group","product_group","P","None","None","Row","c","","euph","a1->a0.Product_Group","col18"
"a1.ceid","ceid_1","P","None","None","Row","c","","euph","a1->a0.Ceid","col17"
"a1.final_euph","final_euph","Y","None","None","Row","n","","euph","a1->a0.Final_Euph","col26"
"a1.override_shiftly_capacity","override_shiftly_capacity","P","None","None","Row","n","","euph","a1->a0.[Override_Shiftly_Capacity]","col22"
"f(a1)->CAST (   {override_shiftly_capacity}   AS REAL)","shift_capacity_float","Y","None","None","Row","F","***","euph","a1->CAST (   {col22}   AS REAL)","col25"
"f(x)->CASE WHEN {override_shiftly_capacity}  > 0 and   {override_shiftly_capacity}  != '' THEN {shift_capacity_float}  /1000 WHEN {final_euph}  != '' THEN ROUND(  {final_euph} *12*  {gu} /100/1000 , 3) ELSE  {mor_1}   END","mor","Y","None","None","Row","F","***","csv","All->CASE WHEN {col22}  > 0 and   {col22}  != '' THEN {col25}  /1000 WHEN {col26}  != '' THEN ROUND(  {col26} *12*  {col14} /100/1000 , 3) ELSE  {col28}   END","col27"
"JOINGRID:"
"","","Sqlite->a0.prodgroup3                                                                                                    : SQL->{col9}","=","View->a1.product_group                                                                                                    : a1->{col18}",""
"","","Sqlite->f(x)->ceid                                                                                                    : SQL->{col24}","=","View->a1.ceid                                                                                                    : a1->{col17}",""
"FILTERGRID:"






/END_EMBED
/EMBED=VG2;ATCDS_MOR
"VERSION:","1.0"
"OUTERJOIN:","Yes"
"UNIONSORT:","No"
"DISTINCT:","Yes"
"QUOTECSV:","No"
"CTMISSJOIN:","No"
"EMPTYNULL:","No"
"TERMINAL:","No"
"OUTENABLED:","Yes"
"INLINE_VIEW:",""
"LASTPACKEDEXE:",""
"EXCEL:","MOR_ATCDS.csv"
"ROW:","No"
"EMBED:","Y"
"JOINDUCKDB:","N"
"INCNESTUTIL:","N"
"QUERYROWS:","20"
"JOINROWS:","2"
"FILTERROWS:","20"
"COL_ID_COUNTER:","108"
"CHART_COUNTER:","0"
"PIVOTMODE:","0"
"SQLITESPECIALHDRS:","1"
"LEGACYPIVOTHDRS:","0"
"USEPYENGINE:","Y"
"GLOBALS_FILE:",""
"GLOBAL_VARS:","-1"
"<---- New Query ---->","2:9:a0"
"TABLEGRID:","1"
"","Capacity_Item_Product_Mapping",""
"MARSNODE:","Default"
"ARIESNODE:","Default"
"OASYSNODE:","Default"
"ARIESCLASSNODE:","ATD.ARIES"
"OTHERNODE:","ALL.(AT).ATCDS3"
"MARSSCHEMA:","Default"
"DATABASETYPE:","SQLServer"
"SINGLENODE:","ALL.(AT).ATCDS3"
"SINGLESCHEMA:","N/A"
"PROMPT-TEXT:","Fetching Other Data"
"DISTINCT:","No"
"ROW:","No"
"EXCEL:","No"
"CT_MISS_VAL:","No"
"PARALLEL:","0"
"IGNOREINCSUM:","No"
"<---- New Query ---->","2:9:a1"
"TABLEGRID:","1"
"","MCSCapacity_Metric_Parameter",""
"MARSNODE:","Default"
"ARIESNODE:","Default"
"OASYSNODE:","Default"
"ARIESCLASSNODE:","ATD.ARIES"
"OTHERNODE:","ALL.(AT).ATCDS3"
"MARSSCHEMA:","Default"
"DATABASETYPE:","SQLServer"
"SINGLENODE:","ALL.(AT).ATCDS3"
"SINGLESCHEMA:","N/A"
"PROMPT-TEXT:","Fetching Other Data"
"DISTINCT:","No"
"ROW:","No"
"EXCEL:","No"
"CT_MISS_VAL:","No"
"PARALLEL:","0"
"IGNOREINCSUM:","No"
"<---- New Query ---->","2:9:a2"
"TABLEGRID:","1"
"","MCSCapacity_Resource_Parameter",""
"MARSNODE:","Default"
"ARIESNODE:","Default"
"OASYSNODE:","Default"
"ARIESCLASSNODE:","ATD.ARIES"
"OTHERNODE:","ALL.(AT).ATCDS3"
"MARSSCHEMA:","Default"
"DATABASETYPE:","SQLServer"
"SINGLENODE:","ALL.(AT).ATCDS3"
"SINGLESCHEMA:","N/A"
"PROMPT-TEXT:","Fetching Other Data"
"DISTINCT:","No"
"ROW:","No"
"EXCEL:","No"
"CT_MISS_VAL:","No"
"PARALLEL:","0"
"IGNOREINCSUM:","No"
"<---- New Query ---->","-99"
"QUERYGRID:"
"a0.product_group3","product_group3","P","None","None","Row","c","E.g. KBA, SKLU23","vwitemtoshopfloorproductmapping","a0->z0.[ProductGroup3]","col18"
"f(x)->CASE !!!!!WHEN  {product_group3} = 'RPRP282' and {common_name} not like '%Refresh%' THEN 'RPLP282'!!!!!WHEN  {product_group3} = 'RPRP682' and {common_name} not like '%Refresh%' THEN 'RPLP682'!!!!!WHEN  {product_group3} = 'RPRS881' and {common_name} not like '%Refresh%' THEN 'RPLS881'!!!!!WHEN  {product_group3} = 'RPRS601' and {common_name} not like '%Refresh%' THEN 'RPLS601'!!!!!ELSE  {product_group3}  END","prodgroup3","Y","None","None","Row","C","***","CSV","All->CASE !!!!!WHEN  {col18} = 'RPRP282' and {col105} not like '%Refresh%' THEN 'RPLP282'!!!!!WHEN  {col18} = 'RPRP682' and {col105} not like '%Refresh%' THEN 'RPLP682'!!!!!WHEN  {col18} = 'RPRS881' and {col105} not like '%Refresh%' THEN 'RPLS881'!!!!!WHEN  {col18} = 'RPRS601' and {col105} not like '%Refresh%' THEN 'RPLS601'!!!!!ELSE  {col18}  END","col107"
"a1.resource","resource_","Y","None","None","Row","c","","vwmcsmetricdata","a1->a0.[Resource]","col31"
"a0.product","product","P","None","None","Row","c","E.g. AQ8LHURV A TA WB1","vwitemtoshopfloorproductmapping","a0->z0.[Product]","col70"
"a0.item_id","item_id","P","None","None","Row","n","","vwitemtoshopfloorproductmapping","a0->z0.[itemid]","col21"
"a1.item_id","item_id_1","P","None","None","Row","n","","vwmcsmetrickeytoitemmapping","a1->a1.[ItemID]","col24"
"a1.dlcp_proc","dlcp_proc","Y","None","None","Row","c","","vwmcsitemcharacteristics","a1->a2.[DLCP_PROC]","col93"
"a1.ceid","ceid","P","None","None","Row","c","E.g. DBIaa, DOBba","vwmcsmetricdata","a1->a0.[CEID]","col71"
"a1.operation","operation","P","None","None","Row","c","Workstream Operation E.g. 1690, 1722. Mapped to operation name(all operations may not be associated with every Product)","vwvgoperationlocationmapping","a1->a6.[Operation]","col38"
"a1.operation_name","operation_name","Y","None","None","Row","c","E.g. BURNIN, BLU","vwmcsmetricdata","a1->a0.[Operation]","col32"
"a1.parameter_value","euph","Y","None","None","Row","f","Parameter Value (Site value if present, otherwise VF value)","vwmcsmetricdata","a1->a0.[Value]","col27"
"a2.parameter_value","gu","Y","None","None","Row","f","Corresponding Value","vwmcsresourcedata","a2->a0.[Value]","col72"
"a2.ceid","ceid_1","P","None","None","Row","c","E.g. AAPab, BAFaa, LAMaa","vwmcsresourcedata","a2->a0.[CEID]","col73"
"f(x)->ROUND({euph}  *12*{gu}/100/1000,4)","mor","Y","None","None","Row","F","***","@if@1","All->ROUND({col27}  *12*{col72}/100/1000,4)","col74"
"f(x)->MAX ( {start_date} ) OVER (PARTITION BY   {common_name} ,  {dlcp_proc} , {resource_} , {operation_name}  )","max_date","P","None","None","Row","C","***","vwmcsitemcharacteristics","All->MAX ( {col28} ) OVER (PARTITION BY   {col105} ,  {col93} , {col31} , {col32}  )","col90"
"f(x)->CASE WHEN  {start_date}= {max_date}   THEN 'Y' ELSE 'N' END","max_date_flag","P","None","None","Row","C","***","@if@3","All->CASE WHEN  {col28}= {col90}   THEN 'Y' ELSE 'N' END","col91"
"a1.start_date","start_date","P","None","None","Row","t","Start Date for Parameter. Note that value is null if ENGInd is True","vwmcsmetricdata","a1->a0.[StartDateTime]","col28"
"a1.end_date","end_date","P","None","None","Row","t","End Date for Parameter. An End_Date in year 9999 means the Value is still in effect. Note that value is null if ENGInd is True","vwmcsmetricdata","a1->a0.[EndDateTime]","col29"
"a1.metric_key_id","metric_key_id","P","None","None","Row","n","","vwmcsmetricdata","a1->a0.[MetricKeyID]","col97"
"a1.common_name","common_name","Y","None","None","Row","c","","vwmcsitemcharacteristics","a1->a2.[CommonName]","col105"
"JOINGRID:"
"","","View->a1.item_id                                                                                                    : a1->{col24}","=","View->a0.item_id                                                                                                    : a0->{col21}",""
"","","View->a1.ceid                                                                                                    : a1->{col71}","=","View->a2.ceid                                                                                                    : a2->{col73}",""
"FILTERGRID:"
"AND","","a0.platform_name","=","'AT'","","","c","vwitemtoshopfloorproductmapping","a0->z0.[PlatformName]",""
"AND","","a0.product_site_name","=","'A48'","","","c","vwitemtoshopfloorproductmapping","a0->z0.[Facility]",""
"AND","","a0.product_group3","!=","'-'","","","c","vwitemtoshopfloorproductmapping","a0->z0.[ProductGroup3]",""
"AND","","a1.parameter_name","=","'FINAL EUPH'","",".","c","vwmcsmetricdata","a1->a0.[Parameter]",""
"AND","","a1.start_date","<=","GETDATE()","","","t","vwmcsmetricdata","a1->a0.[StartDateTime]",""
"AND","","a1.end_date",">=","GETDATE()","","","t","vwmcsmetricdata","a1->a0.[EndDateTime]",""
"AND","","a1.platform_name","=","'AT'","","","c","vwmcsmetricdata","a1->a0.[PlatformName]",""
"AND","","a1.ceid","Like List","'ACL%'</comma\>'RLM%'</comma\>'TMX%'</comma\>'JDC%'</comma\>'HBC%'</comma\>'TCB%'</comma\>'DIA%'","","","c","vwmcsmetricdata","a1->a0.[CEID]",""
"AND","","a1.site_name_item","In","'CD6'</comma\>'VF'","","","c","vwmcsitemdata","a1->a1.[SiteName]",""
"AND","","a1.parameter_value","<","8000","","","f","vwmcsmetricdata","a1->a0.[Value]",""
"AND","","a2.platform_name","=","'AT'","","","c","vwmcsresourcedata","a2->a0.[PlatformName]",""
"AND","","a2.start_date","<=","GETDATE()","","","t","vwmcsresourcedata","a2->a0.[StartDate]",""
"AND","","a2.end_date",">=","GETDATE()","","","t","vwmcsresourcedata","a2->a0.[EndDate]",""
"AND","","a2.ceid","In Temp"," {View (a1)} : View->a1.ceid","","","c","vwmcsresourcedata","a2->a0.[CEID]","a1->{col71}"
"AND","","a2.parameter_name","=","'GU %'","",".","c","vwmcsresourcedata","a2->a0.[Parameter]",""
"AND","","a2.site_name","In","'VF'</comma\>'CD6'","","","c","vwmcsresourcedata","a2->a0.[SiteName]",""
"AND","","a2.start_date","<=","GETDATE()","","","t","vwmcsresourcedata","a2->a0.[StartDate]",""
"AND","","a2.end_date",">=","GETDATE()","","","t","vwmcsresourcedata","a2->a0.[EndDate]",""
"AND","","f(x)->{mor}","Is Not Null","","","","fx","@IF@2","All->{col74}",""
"AND","","f(x)->{max_date_flag}","=","'Y'","","","cx","@IF@4","All->{col91}",""













/END_EMBED
/EMBED=VG2;Priority
"VERSION:","1.0"
"OUTERJOIN:","Yes"
"UNIONSORT:","No"
"DISTINCT:","No"
"QUOTECSV:","No"
"CTMISSJOIN:","No"
"EMPTYNULL:","No"
"TERMINAL:","Yes"
"OUTENABLED:","Yes"
"INLINE_VIEW:",""
"LASTPACKEDEXE:",""
"EXCEL:","out_1230.tab"
"ROW:","No"
"EMBED:","Y"
"JOINDUCKDB:","N"
"INCNESTUTIL:","N"
"QUERYROWS:","0"
"JOINROWS:","0"
"FILTERROWS:","0"
"COL_ID_COUNTER:","0"
"CHART_COUNTER:","0"
"PIVOTMODE:","0"
"SQLITESPECIALHDRS:","1"
"LEGACYPIVOTHDRS:","0"
"USEPYENGINE:","Y"
"GLOBALS_FILE:",""
"GLOBAL_VARS:","-1"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Write-File:Ypriority.py<SOF><{><}>from datetime import datetime, timedelta, date<{><}>import pandas as pd<{><}>import os<{><}><{><}>PRODUCT = []<{><}><{><}>file_list = [f for f in os.listdir() if '_TO_' in f]<{><}><{><}>for x in file_list:<{><}>    split_str = x.split('_')<{><}>    PRODUCT.append(split_str[0])<{><}><{><}>PRODUCT.sort()<{><}><{><}><{><}>df = pd.DataFrame(<{><}>    columns=['product', 'min_first_occur', 'goal_first_occur', 'max_output'])<{><}><{><}><{><}>for p in PRODUCT:<{><}><{><}>    matched_file = [f for f in file_list if p in f][0]<{><}>    df_prod = pd.read_csv(matched_file)<{><}><{><}>    mor = round(df_prod['MOR'].values[0], 2)<{><}><{><}>    try:<{><}>        min_first_occur = df_prod[df_prod['MIN'] > 0].index[0]<{><}>    except:<{><}>        min_first_occur = 48<{><}>    try:<{><}>        goal_first_occur = df_prod[df_prod['DEST_GOAL'] > 0].index[0]<{><}>    except:<{><}>        goal_first_occur = 48<{><}><{><}>    try:<{><}>        max_output = round(mor*df_prod[df_prod['MAX'] > 0]['MAX'].values[-1]/4/12, 2)<{><}>    except:<{><}>        max_output = 0<{><}><{><}>    df.loc[len(df)] = p, min_first_occur, goal_first_occur, max_output<{><}>    <{><}>df.sort_values(<{><}>    by=['min_first_occur', 'goal_first_occur', 'max_output'], ascending=[True, True, False], inplace=True)<{><}>df['max_output'] = round(df['max_output'],3)<{><}>df.to_csv('TACS_priority.csv', index=False)"
"UTILITIESDESC:","Write Text to a file. Optionally use <EOF> to mark end of file"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Python:Y@EXEDIR@\Run_Python_Script.va <~>priority.py<~> <~><~> <~>N<~> <~><<<SPF-APP-SERVER>>><~> <~>Python-v3<~>"
"UTILITIESDESC:","Run Python script"
"<---- New Query ---->","-99"
"QUERYGRID:"
"JOINGRID:"
"FILTERGRID:"

/END_EMBED
/END_EMBED_ALL
